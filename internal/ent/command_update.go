// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/PicoTools/pico/internal/ent/agent"
	"github.com/PicoTools/pico/internal/ent/command"
	"github.com/PicoTools/pico/internal/ent/message"
	"github.com/PicoTools/pico/internal/ent/operator"
	"github.com/PicoTools/pico/internal/ent/predicate"
	"github.com/PicoTools/pico/internal/ent/task"
)

// CommandUpdate is the builder for updating Command entities.
type CommandUpdate struct {
	config
	hooks    []Hook
	mutation *CommandMutation
}

// Where appends a list predicates to the CommandUpdate builder.
func (cu *CommandUpdate) Where(ps ...predicate.Command) *CommandUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetAgentID sets the "agent_id" field.
func (cu *CommandUpdate) SetAgentID(u uint32) *CommandUpdate {
	cu.mutation.SetAgentID(u)
	return cu
}

// SetNillableAgentID sets the "agent_id" field if the given value is not nil.
func (cu *CommandUpdate) SetNillableAgentID(u *uint32) *CommandUpdate {
	if u != nil {
		cu.SetAgentID(*u)
	}
	return cu
}

// SetCmd sets the "cmd" field.
func (cu *CommandUpdate) SetCmd(s string) *CommandUpdate {
	cu.mutation.SetCmd(s)
	return cu
}

// SetNillableCmd sets the "cmd" field if the given value is not nil.
func (cu *CommandUpdate) SetNillableCmd(s *string) *CommandUpdate {
	if s != nil {
		cu.SetCmd(*s)
	}
	return cu
}

// SetVisible sets the "visible" field.
func (cu *CommandUpdate) SetVisible(b bool) *CommandUpdate {
	cu.mutation.SetVisible(b)
	return cu
}

// SetNillableVisible sets the "visible" field if the given value is not nil.
func (cu *CommandUpdate) SetNillableVisible(b *bool) *CommandUpdate {
	if b != nil {
		cu.SetVisible(*b)
	}
	return cu
}

// SetAuthorID sets the "author_id" field.
func (cu *CommandUpdate) SetAuthorID(i int64) *CommandUpdate {
	cu.mutation.SetAuthorID(i)
	return cu
}

// SetNillableAuthorID sets the "author_id" field if the given value is not nil.
func (cu *CommandUpdate) SetNillableAuthorID(i *int64) *CommandUpdate {
	if i != nil {
		cu.SetAuthorID(*i)
	}
	return cu
}

// SetCreatedAt sets the "created_at" field.
func (cu *CommandUpdate) SetCreatedAt(t time.Time) *CommandUpdate {
	cu.mutation.SetCreatedAt(t)
	return cu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cu *CommandUpdate) SetNillableCreatedAt(t *time.Time) *CommandUpdate {
	if t != nil {
		cu.SetCreatedAt(*t)
	}
	return cu
}

// SetClosedAt sets the "closed_at" field.
func (cu *CommandUpdate) SetClosedAt(t time.Time) *CommandUpdate {
	cu.mutation.SetClosedAt(t)
	return cu
}

// SetNillableClosedAt sets the "closed_at" field if the given value is not nil.
func (cu *CommandUpdate) SetNillableClosedAt(t *time.Time) *CommandUpdate {
	if t != nil {
		cu.SetClosedAt(*t)
	}
	return cu
}

// ClearClosedAt clears the value of the "closed_at" field.
func (cu *CommandUpdate) ClearClosedAt() *CommandUpdate {
	cu.mutation.ClearClosedAt()
	return cu
}

// SetAgent sets the "agent" edge to the Agent entity.
func (cu *CommandUpdate) SetAgent(a *Agent) *CommandUpdate {
	return cu.SetAgentID(a.ID)
}

// SetOperatorID sets the "operator" edge to the Operator entity by ID.
func (cu *CommandUpdate) SetOperatorID(id int64) *CommandUpdate {
	cu.mutation.SetOperatorID(id)
	return cu
}

// SetOperator sets the "operator" edge to the Operator entity.
func (cu *CommandUpdate) SetOperator(o *Operator) *CommandUpdate {
	return cu.SetOperatorID(o.ID)
}

// AddMessageIDs adds the "message" edge to the Message entity by IDs.
func (cu *CommandUpdate) AddMessageIDs(ids ...int) *CommandUpdate {
	cu.mutation.AddMessageIDs(ids...)
	return cu
}

// AddMessage adds the "message" edges to the Message entity.
func (cu *CommandUpdate) AddMessage(m ...*Message) *CommandUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cu.AddMessageIDs(ids...)
}

// AddTaskIDs adds the "task" edge to the Task entity by IDs.
func (cu *CommandUpdate) AddTaskIDs(ids ...int64) *CommandUpdate {
	cu.mutation.AddTaskIDs(ids...)
	return cu
}

// AddTask adds the "task" edges to the Task entity.
func (cu *CommandUpdate) AddTask(t ...*Task) *CommandUpdate {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.AddTaskIDs(ids...)
}

// Mutation returns the CommandMutation object of the builder.
func (cu *CommandUpdate) Mutation() *CommandMutation {
	return cu.mutation
}

// ClearAgent clears the "agent" edge to the Agent entity.
func (cu *CommandUpdate) ClearAgent() *CommandUpdate {
	cu.mutation.ClearAgent()
	return cu
}

// ClearOperator clears the "operator" edge to the Operator entity.
func (cu *CommandUpdate) ClearOperator() *CommandUpdate {
	cu.mutation.ClearOperator()
	return cu
}

// ClearMessage clears all "message" edges to the Message entity.
func (cu *CommandUpdate) ClearMessage() *CommandUpdate {
	cu.mutation.ClearMessage()
	return cu
}

// RemoveMessageIDs removes the "message" edge to Message entities by IDs.
func (cu *CommandUpdate) RemoveMessageIDs(ids ...int) *CommandUpdate {
	cu.mutation.RemoveMessageIDs(ids...)
	return cu
}

// RemoveMessage removes "message" edges to Message entities.
func (cu *CommandUpdate) RemoveMessage(m ...*Message) *CommandUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cu.RemoveMessageIDs(ids...)
}

// ClearTask clears all "task" edges to the Task entity.
func (cu *CommandUpdate) ClearTask() *CommandUpdate {
	cu.mutation.ClearTask()
	return cu
}

// RemoveTaskIDs removes the "task" edge to Task entities by IDs.
func (cu *CommandUpdate) RemoveTaskIDs(ids ...int64) *CommandUpdate {
	cu.mutation.RemoveTaskIDs(ids...)
	return cu
}

// RemoveTask removes "task" edges to Task entities.
func (cu *CommandUpdate) RemoveTask(t ...*Task) *CommandUpdate {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.RemoveTaskIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CommandUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CommandUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CommandUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CommandUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CommandUpdate) check() error {
	if v, ok := cu.mutation.Cmd(); ok {
		if err := command.CmdValidator(v); err != nil {
			return &ValidationError{Name: "cmd", err: fmt.Errorf(`ent: validator failed for field "Command.cmd": %w`, err)}
		}
	}
	if cu.mutation.AgentCleared() && len(cu.mutation.AgentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Command.agent"`)
	}
	if cu.mutation.OperatorCleared() && len(cu.mutation.OperatorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Command.operator"`)
	}
	return nil
}

func (cu *CommandUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(command.Table, command.Columns, sqlgraph.NewFieldSpec(command.FieldID, field.TypeInt64))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Cmd(); ok {
		_spec.SetField(command.FieldCmd, field.TypeString, value)
	}
	if value, ok := cu.mutation.Visible(); ok {
		_spec.SetField(command.FieldVisible, field.TypeBool, value)
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.SetField(command.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.ClosedAt(); ok {
		_spec.SetField(command.FieldClosedAt, field.TypeTime, value)
	}
	if cu.mutation.ClosedAtCleared() {
		_spec.ClearField(command.FieldClosedAt, field.TypeTime)
	}
	if cu.mutation.AgentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   command.AgentTable,
			Columns: []string{command.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.AgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   command.AgentTable,
			Columns: []string{command.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.OperatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   command.OperatorTable,
			Columns: []string{command.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.OperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   command.OperatorTable,
			Columns: []string{command.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.MessageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   command.MessageTable,
			Columns: []string{command.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedMessageIDs(); len(nodes) > 0 && !cu.mutation.MessageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   command.MessageTable,
			Columns: []string{command.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.MessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   command.MessageTable,
			Columns: []string{command.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   command.TaskTable,
			Columns: []string{command.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedTaskIDs(); len(nodes) > 0 && !cu.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   command.TaskTable,
			Columns: []string{command.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   command.TaskTable,
			Columns: []string{command.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{command.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CommandUpdateOne is the builder for updating a single Command entity.
type CommandUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CommandMutation
}

// SetAgentID sets the "agent_id" field.
func (cuo *CommandUpdateOne) SetAgentID(u uint32) *CommandUpdateOne {
	cuo.mutation.SetAgentID(u)
	return cuo
}

// SetNillableAgentID sets the "agent_id" field if the given value is not nil.
func (cuo *CommandUpdateOne) SetNillableAgentID(u *uint32) *CommandUpdateOne {
	if u != nil {
		cuo.SetAgentID(*u)
	}
	return cuo
}

// SetCmd sets the "cmd" field.
func (cuo *CommandUpdateOne) SetCmd(s string) *CommandUpdateOne {
	cuo.mutation.SetCmd(s)
	return cuo
}

// SetNillableCmd sets the "cmd" field if the given value is not nil.
func (cuo *CommandUpdateOne) SetNillableCmd(s *string) *CommandUpdateOne {
	if s != nil {
		cuo.SetCmd(*s)
	}
	return cuo
}

// SetVisible sets the "visible" field.
func (cuo *CommandUpdateOne) SetVisible(b bool) *CommandUpdateOne {
	cuo.mutation.SetVisible(b)
	return cuo
}

// SetNillableVisible sets the "visible" field if the given value is not nil.
func (cuo *CommandUpdateOne) SetNillableVisible(b *bool) *CommandUpdateOne {
	if b != nil {
		cuo.SetVisible(*b)
	}
	return cuo
}

// SetAuthorID sets the "author_id" field.
func (cuo *CommandUpdateOne) SetAuthorID(i int64) *CommandUpdateOne {
	cuo.mutation.SetAuthorID(i)
	return cuo
}

// SetNillableAuthorID sets the "author_id" field if the given value is not nil.
func (cuo *CommandUpdateOne) SetNillableAuthorID(i *int64) *CommandUpdateOne {
	if i != nil {
		cuo.SetAuthorID(*i)
	}
	return cuo
}

// SetCreatedAt sets the "created_at" field.
func (cuo *CommandUpdateOne) SetCreatedAt(t time.Time) *CommandUpdateOne {
	cuo.mutation.SetCreatedAt(t)
	return cuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cuo *CommandUpdateOne) SetNillableCreatedAt(t *time.Time) *CommandUpdateOne {
	if t != nil {
		cuo.SetCreatedAt(*t)
	}
	return cuo
}

// SetClosedAt sets the "closed_at" field.
func (cuo *CommandUpdateOne) SetClosedAt(t time.Time) *CommandUpdateOne {
	cuo.mutation.SetClosedAt(t)
	return cuo
}

// SetNillableClosedAt sets the "closed_at" field if the given value is not nil.
func (cuo *CommandUpdateOne) SetNillableClosedAt(t *time.Time) *CommandUpdateOne {
	if t != nil {
		cuo.SetClosedAt(*t)
	}
	return cuo
}

// ClearClosedAt clears the value of the "closed_at" field.
func (cuo *CommandUpdateOne) ClearClosedAt() *CommandUpdateOne {
	cuo.mutation.ClearClosedAt()
	return cuo
}

// SetAgent sets the "agent" edge to the Agent entity.
func (cuo *CommandUpdateOne) SetAgent(a *Agent) *CommandUpdateOne {
	return cuo.SetAgentID(a.ID)
}

// SetOperatorID sets the "operator" edge to the Operator entity by ID.
func (cuo *CommandUpdateOne) SetOperatorID(id int64) *CommandUpdateOne {
	cuo.mutation.SetOperatorID(id)
	return cuo
}

// SetOperator sets the "operator" edge to the Operator entity.
func (cuo *CommandUpdateOne) SetOperator(o *Operator) *CommandUpdateOne {
	return cuo.SetOperatorID(o.ID)
}

// AddMessageIDs adds the "message" edge to the Message entity by IDs.
func (cuo *CommandUpdateOne) AddMessageIDs(ids ...int) *CommandUpdateOne {
	cuo.mutation.AddMessageIDs(ids...)
	return cuo
}

// AddMessage adds the "message" edges to the Message entity.
func (cuo *CommandUpdateOne) AddMessage(m ...*Message) *CommandUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cuo.AddMessageIDs(ids...)
}

// AddTaskIDs adds the "task" edge to the Task entity by IDs.
func (cuo *CommandUpdateOne) AddTaskIDs(ids ...int64) *CommandUpdateOne {
	cuo.mutation.AddTaskIDs(ids...)
	return cuo
}

// AddTask adds the "task" edges to the Task entity.
func (cuo *CommandUpdateOne) AddTask(t ...*Task) *CommandUpdateOne {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.AddTaskIDs(ids...)
}

// Mutation returns the CommandMutation object of the builder.
func (cuo *CommandUpdateOne) Mutation() *CommandMutation {
	return cuo.mutation
}

// ClearAgent clears the "agent" edge to the Agent entity.
func (cuo *CommandUpdateOne) ClearAgent() *CommandUpdateOne {
	cuo.mutation.ClearAgent()
	return cuo
}

// ClearOperator clears the "operator" edge to the Operator entity.
func (cuo *CommandUpdateOne) ClearOperator() *CommandUpdateOne {
	cuo.mutation.ClearOperator()
	return cuo
}

// ClearMessage clears all "message" edges to the Message entity.
func (cuo *CommandUpdateOne) ClearMessage() *CommandUpdateOne {
	cuo.mutation.ClearMessage()
	return cuo
}

// RemoveMessageIDs removes the "message" edge to Message entities by IDs.
func (cuo *CommandUpdateOne) RemoveMessageIDs(ids ...int) *CommandUpdateOne {
	cuo.mutation.RemoveMessageIDs(ids...)
	return cuo
}

// RemoveMessage removes "message" edges to Message entities.
func (cuo *CommandUpdateOne) RemoveMessage(m ...*Message) *CommandUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cuo.RemoveMessageIDs(ids...)
}

// ClearTask clears all "task" edges to the Task entity.
func (cuo *CommandUpdateOne) ClearTask() *CommandUpdateOne {
	cuo.mutation.ClearTask()
	return cuo
}

// RemoveTaskIDs removes the "task" edge to Task entities by IDs.
func (cuo *CommandUpdateOne) RemoveTaskIDs(ids ...int64) *CommandUpdateOne {
	cuo.mutation.RemoveTaskIDs(ids...)
	return cuo
}

// RemoveTask removes "task" edges to Task entities.
func (cuo *CommandUpdateOne) RemoveTask(t ...*Task) *CommandUpdateOne {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.RemoveTaskIDs(ids...)
}

// Where appends a list predicates to the CommandUpdate builder.
func (cuo *CommandUpdateOne) Where(ps ...predicate.Command) *CommandUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CommandUpdateOne) Select(field string, fields ...string) *CommandUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Command entity.
func (cuo *CommandUpdateOne) Save(ctx context.Context) (*Command, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CommandUpdateOne) SaveX(ctx context.Context) *Command {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CommandUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CommandUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CommandUpdateOne) check() error {
	if v, ok := cuo.mutation.Cmd(); ok {
		if err := command.CmdValidator(v); err != nil {
			return &ValidationError{Name: "cmd", err: fmt.Errorf(`ent: validator failed for field "Command.cmd": %w`, err)}
		}
	}
	if cuo.mutation.AgentCleared() && len(cuo.mutation.AgentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Command.agent"`)
	}
	if cuo.mutation.OperatorCleared() && len(cuo.mutation.OperatorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Command.operator"`)
	}
	return nil
}

func (cuo *CommandUpdateOne) sqlSave(ctx context.Context) (_node *Command, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(command.Table, command.Columns, sqlgraph.NewFieldSpec(command.FieldID, field.TypeInt64))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Command.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, command.FieldID)
		for _, f := range fields {
			if !command.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != command.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Cmd(); ok {
		_spec.SetField(command.FieldCmd, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Visible(); ok {
		_spec.SetField(command.FieldVisible, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.SetField(command.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.ClosedAt(); ok {
		_spec.SetField(command.FieldClosedAt, field.TypeTime, value)
	}
	if cuo.mutation.ClosedAtCleared() {
		_spec.ClearField(command.FieldClosedAt, field.TypeTime)
	}
	if cuo.mutation.AgentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   command.AgentTable,
			Columns: []string{command.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.AgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   command.AgentTable,
			Columns: []string{command.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.OperatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   command.OperatorTable,
			Columns: []string{command.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.OperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   command.OperatorTable,
			Columns: []string{command.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.MessageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   command.MessageTable,
			Columns: []string{command.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedMessageIDs(); len(nodes) > 0 && !cuo.mutation.MessageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   command.MessageTable,
			Columns: []string{command.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.MessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   command.MessageTable,
			Columns: []string{command.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   command.TaskTable,
			Columns: []string{command.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedTaskIDs(); len(nodes) > 0 && !cuo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   command.TaskTable,
			Columns: []string{command.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   command.TaskTable,
			Columns: []string{command.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Command{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{command.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
