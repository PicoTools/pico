// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/PicoTools/pico-shared/shared"
	"github.com/PicoTools/pico/internal/ent/agent"
	"github.com/PicoTools/pico/internal/ent/command"
	"github.com/PicoTools/pico/internal/ent/listener"
	"github.com/PicoTools/pico/internal/ent/predicate"
	"github.com/PicoTools/pico/internal/ent/task"
	"github.com/PicoTools/pico/internal/types"
)

// AgentUpdate is the builder for updating Agent entities.
type AgentUpdate struct {
	config
	hooks    []Hook
	mutation *AgentMutation
}

// Where appends a list predicates to the AgentUpdate builder.
func (au *AgentUpdate) Where(ps ...predicate.Agent) *AgentUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AgentUpdate) SetUpdatedAt(t time.Time) *AgentUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetDeletedAt sets the "deleted_at" field.
func (au *AgentUpdate) SetDeletedAt(t time.Time) *AgentUpdate {
	au.mutation.SetDeletedAt(t)
	return au
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (au *AgentUpdate) SetNillableDeletedAt(t *time.Time) *AgentUpdate {
	if t != nil {
		au.SetDeletedAt(*t)
	}
	return au
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (au *AgentUpdate) ClearDeletedAt() *AgentUpdate {
	au.mutation.ClearDeletedAt()
	return au
}

// SetListenerID sets the "listener_id" field.
func (au *AgentUpdate) SetListenerID(i int64) *AgentUpdate {
	au.mutation.SetListenerID(i)
	return au
}

// SetNillableListenerID sets the "listener_id" field if the given value is not nil.
func (au *AgentUpdate) SetNillableListenerID(i *int64) *AgentUpdate {
	if i != nil {
		au.SetListenerID(*i)
	}
	return au
}

// SetExtIP sets the "ext_ip" field.
func (au *AgentUpdate) SetExtIP(t types.Inet) *AgentUpdate {
	au.mutation.SetExtIP(t)
	return au
}

// SetNillableExtIP sets the "ext_ip" field if the given value is not nil.
func (au *AgentUpdate) SetNillableExtIP(t *types.Inet) *AgentUpdate {
	if t != nil {
		au.SetExtIP(*t)
	}
	return au
}

// ClearExtIP clears the value of the "ext_ip" field.
func (au *AgentUpdate) ClearExtIP() *AgentUpdate {
	au.mutation.ClearExtIP()
	return au
}

// SetIntIP sets the "int_ip" field.
func (au *AgentUpdate) SetIntIP(t types.Inet) *AgentUpdate {
	au.mutation.SetIntIP(t)
	return au
}

// SetNillableIntIP sets the "int_ip" field if the given value is not nil.
func (au *AgentUpdate) SetNillableIntIP(t *types.Inet) *AgentUpdate {
	if t != nil {
		au.SetIntIP(*t)
	}
	return au
}

// ClearIntIP clears the value of the "int_ip" field.
func (au *AgentUpdate) ClearIntIP() *AgentUpdate {
	au.mutation.ClearIntIP()
	return au
}

// SetOs sets the "os" field.
func (au *AgentUpdate) SetOs(so shared.AgentOs) *AgentUpdate {
	au.mutation.SetOs(so)
	return au
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (au *AgentUpdate) SetNillableOs(so *shared.AgentOs) *AgentUpdate {
	if so != nil {
		au.SetOs(*so)
	}
	return au
}

// SetOsMeta sets the "os_meta" field.
func (au *AgentUpdate) SetOsMeta(s string) *AgentUpdate {
	au.mutation.SetOsMeta(s)
	return au
}

// SetNillableOsMeta sets the "os_meta" field if the given value is not nil.
func (au *AgentUpdate) SetNillableOsMeta(s *string) *AgentUpdate {
	if s != nil {
		au.SetOsMeta(*s)
	}
	return au
}

// ClearOsMeta clears the value of the "os_meta" field.
func (au *AgentUpdate) ClearOsMeta() *AgentUpdate {
	au.mutation.ClearOsMeta()
	return au
}

// SetHostname sets the "hostname" field.
func (au *AgentUpdate) SetHostname(s string) *AgentUpdate {
	au.mutation.SetHostname(s)
	return au
}

// SetNillableHostname sets the "hostname" field if the given value is not nil.
func (au *AgentUpdate) SetNillableHostname(s *string) *AgentUpdate {
	if s != nil {
		au.SetHostname(*s)
	}
	return au
}

// ClearHostname clears the value of the "hostname" field.
func (au *AgentUpdate) ClearHostname() *AgentUpdate {
	au.mutation.ClearHostname()
	return au
}

// SetUsername sets the "username" field.
func (au *AgentUpdate) SetUsername(s string) *AgentUpdate {
	au.mutation.SetUsername(s)
	return au
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (au *AgentUpdate) SetNillableUsername(s *string) *AgentUpdate {
	if s != nil {
		au.SetUsername(*s)
	}
	return au
}

// ClearUsername clears the value of the "username" field.
func (au *AgentUpdate) ClearUsername() *AgentUpdate {
	au.mutation.ClearUsername()
	return au
}

// SetDomain sets the "domain" field.
func (au *AgentUpdate) SetDomain(s string) *AgentUpdate {
	au.mutation.SetDomain(s)
	return au
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (au *AgentUpdate) SetNillableDomain(s *string) *AgentUpdate {
	if s != nil {
		au.SetDomain(*s)
	}
	return au
}

// ClearDomain clears the value of the "domain" field.
func (au *AgentUpdate) ClearDomain() *AgentUpdate {
	au.mutation.ClearDomain()
	return au
}

// SetPrivileged sets the "privileged" field.
func (au *AgentUpdate) SetPrivileged(b bool) *AgentUpdate {
	au.mutation.SetPrivileged(b)
	return au
}

// SetNillablePrivileged sets the "privileged" field if the given value is not nil.
func (au *AgentUpdate) SetNillablePrivileged(b *bool) *AgentUpdate {
	if b != nil {
		au.SetPrivileged(*b)
	}
	return au
}

// ClearPrivileged clears the value of the "privileged" field.
func (au *AgentUpdate) ClearPrivileged() *AgentUpdate {
	au.mutation.ClearPrivileged()
	return au
}

// SetProcessName sets the "process_name" field.
func (au *AgentUpdate) SetProcessName(s string) *AgentUpdate {
	au.mutation.SetProcessName(s)
	return au
}

// SetNillableProcessName sets the "process_name" field if the given value is not nil.
func (au *AgentUpdate) SetNillableProcessName(s *string) *AgentUpdate {
	if s != nil {
		au.SetProcessName(*s)
	}
	return au
}

// ClearProcessName clears the value of the "process_name" field.
func (au *AgentUpdate) ClearProcessName() *AgentUpdate {
	au.mutation.ClearProcessName()
	return au
}

// SetPid sets the "pid" field.
func (au *AgentUpdate) SetPid(i int64) *AgentUpdate {
	au.mutation.ResetPid()
	au.mutation.SetPid(i)
	return au
}

// SetNillablePid sets the "pid" field if the given value is not nil.
func (au *AgentUpdate) SetNillablePid(i *int64) *AgentUpdate {
	if i != nil {
		au.SetPid(*i)
	}
	return au
}

// AddPid adds i to the "pid" field.
func (au *AgentUpdate) AddPid(i int64) *AgentUpdate {
	au.mutation.AddPid(i)
	return au
}

// ClearPid clears the value of the "pid" field.
func (au *AgentUpdate) ClearPid() *AgentUpdate {
	au.mutation.ClearPid()
	return au
}

// SetArch sets the "arch" field.
func (au *AgentUpdate) SetArch(sa shared.AgentArch) *AgentUpdate {
	au.mutation.SetArch(sa)
	return au
}

// SetNillableArch sets the "arch" field if the given value is not nil.
func (au *AgentUpdate) SetNillableArch(sa *shared.AgentArch) *AgentUpdate {
	if sa != nil {
		au.SetArch(*sa)
	}
	return au
}

// SetSleep sets the "sleep" field.
func (au *AgentUpdate) SetSleep(u uint32) *AgentUpdate {
	au.mutation.ResetSleep()
	au.mutation.SetSleep(u)
	return au
}

// SetNillableSleep sets the "sleep" field if the given value is not nil.
func (au *AgentUpdate) SetNillableSleep(u *uint32) *AgentUpdate {
	if u != nil {
		au.SetSleep(*u)
	}
	return au
}

// AddSleep adds u to the "sleep" field.
func (au *AgentUpdate) AddSleep(u int32) *AgentUpdate {
	au.mutation.AddSleep(u)
	return au
}

// SetJitter sets the "jitter" field.
func (au *AgentUpdate) SetJitter(u uint8) *AgentUpdate {
	au.mutation.ResetJitter()
	au.mutation.SetJitter(u)
	return au
}

// SetNillableJitter sets the "jitter" field if the given value is not nil.
func (au *AgentUpdate) SetNillableJitter(u *uint8) *AgentUpdate {
	if u != nil {
		au.SetJitter(*u)
	}
	return au
}

// AddJitter adds u to the "jitter" field.
func (au *AgentUpdate) AddJitter(u int8) *AgentUpdate {
	au.mutation.AddJitter(u)
	return au
}

// SetFirst sets the "first" field.
func (au *AgentUpdate) SetFirst(t time.Time) *AgentUpdate {
	au.mutation.SetFirst(t)
	return au
}

// SetNillableFirst sets the "first" field if the given value is not nil.
func (au *AgentUpdate) SetNillableFirst(t *time.Time) *AgentUpdate {
	if t != nil {
		au.SetFirst(*t)
	}
	return au
}

// SetLast sets the "last" field.
func (au *AgentUpdate) SetLast(t time.Time) *AgentUpdate {
	au.mutation.SetLast(t)
	return au
}

// SetNillableLast sets the "last" field if the given value is not nil.
func (au *AgentUpdate) SetNillableLast(t *time.Time) *AgentUpdate {
	if t != nil {
		au.SetLast(*t)
	}
	return au
}

// SetCaps sets the "caps" field.
func (au *AgentUpdate) SetCaps(u uint32) *AgentUpdate {
	au.mutation.ResetCaps()
	au.mutation.SetCaps(u)
	return au
}

// SetNillableCaps sets the "caps" field if the given value is not nil.
func (au *AgentUpdate) SetNillableCaps(u *uint32) *AgentUpdate {
	if u != nil {
		au.SetCaps(*u)
	}
	return au
}

// AddCaps adds u to the "caps" field.
func (au *AgentUpdate) AddCaps(u int32) *AgentUpdate {
	au.mutation.AddCaps(u)
	return au
}

// SetNote sets the "note" field.
func (au *AgentUpdate) SetNote(s string) *AgentUpdate {
	au.mutation.SetNote(s)
	return au
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (au *AgentUpdate) SetNillableNote(s *string) *AgentUpdate {
	if s != nil {
		au.SetNote(*s)
	}
	return au
}

// ClearNote clears the value of the "note" field.
func (au *AgentUpdate) ClearNote() *AgentUpdate {
	au.mutation.ClearNote()
	return au
}

// SetColor sets the "color" field.
func (au *AgentUpdate) SetColor(u uint32) *AgentUpdate {
	au.mutation.ResetColor()
	au.mutation.SetColor(u)
	return au
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (au *AgentUpdate) SetNillableColor(u *uint32) *AgentUpdate {
	if u != nil {
		au.SetColor(*u)
	}
	return au
}

// AddColor adds u to the "color" field.
func (au *AgentUpdate) AddColor(u int32) *AgentUpdate {
	au.mutation.AddColor(u)
	return au
}

// SetListener sets the "listener" edge to the Listener entity.
func (au *AgentUpdate) SetListener(l *Listener) *AgentUpdate {
	return au.SetListenerID(l.ID)
}

// AddCommandIDs adds the "command" edge to the Command entity by IDs.
func (au *AgentUpdate) AddCommandIDs(ids ...int64) *AgentUpdate {
	au.mutation.AddCommandIDs(ids...)
	return au
}

// AddCommand adds the "command" edges to the Command entity.
func (au *AgentUpdate) AddCommand(c ...*Command) *AgentUpdate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return au.AddCommandIDs(ids...)
}

// AddTaskIDs adds the "task" edge to the Task entity by IDs.
func (au *AgentUpdate) AddTaskIDs(ids ...int64) *AgentUpdate {
	au.mutation.AddTaskIDs(ids...)
	return au
}

// AddTask adds the "task" edges to the Task entity.
func (au *AgentUpdate) AddTask(t ...*Task) *AgentUpdate {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.AddTaskIDs(ids...)
}

// Mutation returns the AgentMutation object of the builder.
func (au *AgentUpdate) Mutation() *AgentMutation {
	return au.mutation
}

// ClearListener clears the "listener" edge to the Listener entity.
func (au *AgentUpdate) ClearListener() *AgentUpdate {
	au.mutation.ClearListener()
	return au
}

// ClearCommand clears all "command" edges to the Command entity.
func (au *AgentUpdate) ClearCommand() *AgentUpdate {
	au.mutation.ClearCommand()
	return au
}

// RemoveCommandIDs removes the "command" edge to Command entities by IDs.
func (au *AgentUpdate) RemoveCommandIDs(ids ...int64) *AgentUpdate {
	au.mutation.RemoveCommandIDs(ids...)
	return au
}

// RemoveCommand removes "command" edges to Command entities.
func (au *AgentUpdate) RemoveCommand(c ...*Command) *AgentUpdate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return au.RemoveCommandIDs(ids...)
}

// ClearTask clears all "task" edges to the Task entity.
func (au *AgentUpdate) ClearTask() *AgentUpdate {
	au.mutation.ClearTask()
	return au
}

// RemoveTaskIDs removes the "task" edge to Task entities by IDs.
func (au *AgentUpdate) RemoveTaskIDs(ids ...int64) *AgentUpdate {
	au.mutation.RemoveTaskIDs(ids...)
	return au
}

// RemoveTask removes "task" edges to Task entities.
func (au *AgentUpdate) RemoveTask(t ...*Task) *AgentUpdate {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.RemoveTaskIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AgentUpdate) Save(ctx context.Context) (int, error) {
	if err := au.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AgentUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AgentUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AgentUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AgentUpdate) defaults() error {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		if agent.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized agent.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := agent.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (au *AgentUpdate) check() error {
	if v, ok := au.mutation.ExtIP(); ok {
		if err := agent.ExtIPValidator(v.String()); err != nil {
			return &ValidationError{Name: "ext_ip", err: fmt.Errorf(`ent: validator failed for field "Agent.ext_ip": %w`, err)}
		}
	}
	if v, ok := au.mutation.IntIP(); ok {
		if err := agent.IntIPValidator(v.String()); err != nil {
			return &ValidationError{Name: "int_ip", err: fmt.Errorf(`ent: validator failed for field "Agent.int_ip": %w`, err)}
		}
	}
	if v, ok := au.mutation.Os(); ok {
		if err := agent.OsValidator(v); err != nil {
			return &ValidationError{Name: "os", err: fmt.Errorf(`ent: validator failed for field "Agent.os": %w`, err)}
		}
	}
	if v, ok := au.mutation.OsMeta(); ok {
		if err := agent.OsMetaValidator(v); err != nil {
			return &ValidationError{Name: "os_meta", err: fmt.Errorf(`ent: validator failed for field "Agent.os_meta": %w`, err)}
		}
	}
	if v, ok := au.mutation.Hostname(); ok {
		if err := agent.HostnameValidator(v); err != nil {
			return &ValidationError{Name: "hostname", err: fmt.Errorf(`ent: validator failed for field "Agent.hostname": %w`, err)}
		}
	}
	if v, ok := au.mutation.Username(); ok {
		if err := agent.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Agent.username": %w`, err)}
		}
	}
	if v, ok := au.mutation.Domain(); ok {
		if err := agent.DomainValidator(v); err != nil {
			return &ValidationError{Name: "domain", err: fmt.Errorf(`ent: validator failed for field "Agent.domain": %w`, err)}
		}
	}
	if v, ok := au.mutation.ProcessName(); ok {
		if err := agent.ProcessNameValidator(v); err != nil {
			return &ValidationError{Name: "process_name", err: fmt.Errorf(`ent: validator failed for field "Agent.process_name": %w`, err)}
		}
	}
	if v, ok := au.mutation.Arch(); ok {
		if err := agent.ArchValidator(v); err != nil {
			return &ValidationError{Name: "arch", err: fmt.Errorf(`ent: validator failed for field "Agent.arch": %w`, err)}
		}
	}
	if v, ok := au.mutation.Note(); ok {
		if err := agent.NoteValidator(v); err != nil {
			return &ValidationError{Name: "note", err: fmt.Errorf(`ent: validator failed for field "Agent.note": %w`, err)}
		}
	}
	if au.mutation.ListenerCleared() && len(au.mutation.ListenerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Agent.listener"`)
	}
	return nil
}

func (au *AgentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(agent.Table, agent.Columns, sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint32))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(agent.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.DeletedAt(); ok {
		_spec.SetField(agent.FieldDeletedAt, field.TypeTime, value)
	}
	if au.mutation.DeletedAtCleared() {
		_spec.ClearField(agent.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := au.mutation.ExtIP(); ok {
		_spec.SetField(agent.FieldExtIP, field.TypeString, value)
	}
	if au.mutation.ExtIPCleared() {
		_spec.ClearField(agent.FieldExtIP, field.TypeString)
	}
	if value, ok := au.mutation.IntIP(); ok {
		_spec.SetField(agent.FieldIntIP, field.TypeString, value)
	}
	if au.mutation.IntIPCleared() {
		_spec.ClearField(agent.FieldIntIP, field.TypeString)
	}
	if value, ok := au.mutation.Os(); ok {
		_spec.SetField(agent.FieldOs, field.TypeEnum, value)
	}
	if value, ok := au.mutation.OsMeta(); ok {
		_spec.SetField(agent.FieldOsMeta, field.TypeString, value)
	}
	if au.mutation.OsMetaCleared() {
		_spec.ClearField(agent.FieldOsMeta, field.TypeString)
	}
	if value, ok := au.mutation.Hostname(); ok {
		_spec.SetField(agent.FieldHostname, field.TypeString, value)
	}
	if au.mutation.HostnameCleared() {
		_spec.ClearField(agent.FieldHostname, field.TypeString)
	}
	if value, ok := au.mutation.Username(); ok {
		_spec.SetField(agent.FieldUsername, field.TypeString, value)
	}
	if au.mutation.UsernameCleared() {
		_spec.ClearField(agent.FieldUsername, field.TypeString)
	}
	if value, ok := au.mutation.Domain(); ok {
		_spec.SetField(agent.FieldDomain, field.TypeString, value)
	}
	if au.mutation.DomainCleared() {
		_spec.ClearField(agent.FieldDomain, field.TypeString)
	}
	if value, ok := au.mutation.Privileged(); ok {
		_spec.SetField(agent.FieldPrivileged, field.TypeBool, value)
	}
	if au.mutation.PrivilegedCleared() {
		_spec.ClearField(agent.FieldPrivileged, field.TypeBool)
	}
	if value, ok := au.mutation.ProcessName(); ok {
		_spec.SetField(agent.FieldProcessName, field.TypeString, value)
	}
	if au.mutation.ProcessNameCleared() {
		_spec.ClearField(agent.FieldProcessName, field.TypeString)
	}
	if value, ok := au.mutation.Pid(); ok {
		_spec.SetField(agent.FieldPid, field.TypeInt64, value)
	}
	if value, ok := au.mutation.AddedPid(); ok {
		_spec.AddField(agent.FieldPid, field.TypeInt64, value)
	}
	if au.mutation.PidCleared() {
		_spec.ClearField(agent.FieldPid, field.TypeInt64)
	}
	if value, ok := au.mutation.Arch(); ok {
		_spec.SetField(agent.FieldArch, field.TypeEnum, value)
	}
	if value, ok := au.mutation.Sleep(); ok {
		_spec.SetField(agent.FieldSleep, field.TypeUint32, value)
	}
	if value, ok := au.mutation.AddedSleep(); ok {
		_spec.AddField(agent.FieldSleep, field.TypeUint32, value)
	}
	if value, ok := au.mutation.Jitter(); ok {
		_spec.SetField(agent.FieldJitter, field.TypeUint8, value)
	}
	if value, ok := au.mutation.AddedJitter(); ok {
		_spec.AddField(agent.FieldJitter, field.TypeUint8, value)
	}
	if value, ok := au.mutation.First(); ok {
		_spec.SetField(agent.FieldFirst, field.TypeTime, value)
	}
	if value, ok := au.mutation.Last(); ok {
		_spec.SetField(agent.FieldLast, field.TypeTime, value)
	}
	if value, ok := au.mutation.Caps(); ok {
		_spec.SetField(agent.FieldCaps, field.TypeUint32, value)
	}
	if value, ok := au.mutation.AddedCaps(); ok {
		_spec.AddField(agent.FieldCaps, field.TypeUint32, value)
	}
	if value, ok := au.mutation.Note(); ok {
		_spec.SetField(agent.FieldNote, field.TypeString, value)
	}
	if au.mutation.NoteCleared() {
		_spec.ClearField(agent.FieldNote, field.TypeString)
	}
	if value, ok := au.mutation.Color(); ok {
		_spec.SetField(agent.FieldColor, field.TypeUint32, value)
	}
	if value, ok := au.mutation.AddedColor(); ok {
		_spec.AddField(agent.FieldColor, field.TypeUint32, value)
	}
	if au.mutation.ListenerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   agent.ListenerTable,
			Columns: []string{agent.ListenerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(listener.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ListenerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   agent.ListenerTable,
			Columns: []string{agent.ListenerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(listener.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.CommandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.CommandTable,
			Columns: []string{agent.CommandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(command.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedCommandIDs(); len(nodes) > 0 && !au.mutation.CommandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.CommandTable,
			Columns: []string{agent.CommandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(command.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.CommandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.CommandTable,
			Columns: []string{agent.CommandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(command.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.TaskTable,
			Columns: []string{agent.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedTaskIDs(); len(nodes) > 0 && !au.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.TaskTable,
			Columns: []string{agent.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.TaskTable,
			Columns: []string{agent.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{agent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AgentUpdateOne is the builder for updating a single Agent entity.
type AgentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AgentMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AgentUpdateOne) SetUpdatedAt(t time.Time) *AgentUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetDeletedAt sets the "deleted_at" field.
func (auo *AgentUpdateOne) SetDeletedAt(t time.Time) *AgentUpdateOne {
	auo.mutation.SetDeletedAt(t)
	return auo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableDeletedAt(t *time.Time) *AgentUpdateOne {
	if t != nil {
		auo.SetDeletedAt(*t)
	}
	return auo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (auo *AgentUpdateOne) ClearDeletedAt() *AgentUpdateOne {
	auo.mutation.ClearDeletedAt()
	return auo
}

// SetListenerID sets the "listener_id" field.
func (auo *AgentUpdateOne) SetListenerID(i int64) *AgentUpdateOne {
	auo.mutation.SetListenerID(i)
	return auo
}

// SetNillableListenerID sets the "listener_id" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableListenerID(i *int64) *AgentUpdateOne {
	if i != nil {
		auo.SetListenerID(*i)
	}
	return auo
}

// SetExtIP sets the "ext_ip" field.
func (auo *AgentUpdateOne) SetExtIP(t types.Inet) *AgentUpdateOne {
	auo.mutation.SetExtIP(t)
	return auo
}

// SetNillableExtIP sets the "ext_ip" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableExtIP(t *types.Inet) *AgentUpdateOne {
	if t != nil {
		auo.SetExtIP(*t)
	}
	return auo
}

// ClearExtIP clears the value of the "ext_ip" field.
func (auo *AgentUpdateOne) ClearExtIP() *AgentUpdateOne {
	auo.mutation.ClearExtIP()
	return auo
}

// SetIntIP sets the "int_ip" field.
func (auo *AgentUpdateOne) SetIntIP(t types.Inet) *AgentUpdateOne {
	auo.mutation.SetIntIP(t)
	return auo
}

// SetNillableIntIP sets the "int_ip" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableIntIP(t *types.Inet) *AgentUpdateOne {
	if t != nil {
		auo.SetIntIP(*t)
	}
	return auo
}

// ClearIntIP clears the value of the "int_ip" field.
func (auo *AgentUpdateOne) ClearIntIP() *AgentUpdateOne {
	auo.mutation.ClearIntIP()
	return auo
}

// SetOs sets the "os" field.
func (auo *AgentUpdateOne) SetOs(so shared.AgentOs) *AgentUpdateOne {
	auo.mutation.SetOs(so)
	return auo
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableOs(so *shared.AgentOs) *AgentUpdateOne {
	if so != nil {
		auo.SetOs(*so)
	}
	return auo
}

// SetOsMeta sets the "os_meta" field.
func (auo *AgentUpdateOne) SetOsMeta(s string) *AgentUpdateOne {
	auo.mutation.SetOsMeta(s)
	return auo
}

// SetNillableOsMeta sets the "os_meta" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableOsMeta(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetOsMeta(*s)
	}
	return auo
}

// ClearOsMeta clears the value of the "os_meta" field.
func (auo *AgentUpdateOne) ClearOsMeta() *AgentUpdateOne {
	auo.mutation.ClearOsMeta()
	return auo
}

// SetHostname sets the "hostname" field.
func (auo *AgentUpdateOne) SetHostname(s string) *AgentUpdateOne {
	auo.mutation.SetHostname(s)
	return auo
}

// SetNillableHostname sets the "hostname" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableHostname(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetHostname(*s)
	}
	return auo
}

// ClearHostname clears the value of the "hostname" field.
func (auo *AgentUpdateOne) ClearHostname() *AgentUpdateOne {
	auo.mutation.ClearHostname()
	return auo
}

// SetUsername sets the "username" field.
func (auo *AgentUpdateOne) SetUsername(s string) *AgentUpdateOne {
	auo.mutation.SetUsername(s)
	return auo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableUsername(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetUsername(*s)
	}
	return auo
}

// ClearUsername clears the value of the "username" field.
func (auo *AgentUpdateOne) ClearUsername() *AgentUpdateOne {
	auo.mutation.ClearUsername()
	return auo
}

// SetDomain sets the "domain" field.
func (auo *AgentUpdateOne) SetDomain(s string) *AgentUpdateOne {
	auo.mutation.SetDomain(s)
	return auo
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableDomain(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetDomain(*s)
	}
	return auo
}

// ClearDomain clears the value of the "domain" field.
func (auo *AgentUpdateOne) ClearDomain() *AgentUpdateOne {
	auo.mutation.ClearDomain()
	return auo
}

// SetPrivileged sets the "privileged" field.
func (auo *AgentUpdateOne) SetPrivileged(b bool) *AgentUpdateOne {
	auo.mutation.SetPrivileged(b)
	return auo
}

// SetNillablePrivileged sets the "privileged" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillablePrivileged(b *bool) *AgentUpdateOne {
	if b != nil {
		auo.SetPrivileged(*b)
	}
	return auo
}

// ClearPrivileged clears the value of the "privileged" field.
func (auo *AgentUpdateOne) ClearPrivileged() *AgentUpdateOne {
	auo.mutation.ClearPrivileged()
	return auo
}

// SetProcessName sets the "process_name" field.
func (auo *AgentUpdateOne) SetProcessName(s string) *AgentUpdateOne {
	auo.mutation.SetProcessName(s)
	return auo
}

// SetNillableProcessName sets the "process_name" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableProcessName(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetProcessName(*s)
	}
	return auo
}

// ClearProcessName clears the value of the "process_name" field.
func (auo *AgentUpdateOne) ClearProcessName() *AgentUpdateOne {
	auo.mutation.ClearProcessName()
	return auo
}

// SetPid sets the "pid" field.
func (auo *AgentUpdateOne) SetPid(i int64) *AgentUpdateOne {
	auo.mutation.ResetPid()
	auo.mutation.SetPid(i)
	return auo
}

// SetNillablePid sets the "pid" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillablePid(i *int64) *AgentUpdateOne {
	if i != nil {
		auo.SetPid(*i)
	}
	return auo
}

// AddPid adds i to the "pid" field.
func (auo *AgentUpdateOne) AddPid(i int64) *AgentUpdateOne {
	auo.mutation.AddPid(i)
	return auo
}

// ClearPid clears the value of the "pid" field.
func (auo *AgentUpdateOne) ClearPid() *AgentUpdateOne {
	auo.mutation.ClearPid()
	return auo
}

// SetArch sets the "arch" field.
func (auo *AgentUpdateOne) SetArch(sa shared.AgentArch) *AgentUpdateOne {
	auo.mutation.SetArch(sa)
	return auo
}

// SetNillableArch sets the "arch" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableArch(sa *shared.AgentArch) *AgentUpdateOne {
	if sa != nil {
		auo.SetArch(*sa)
	}
	return auo
}

// SetSleep sets the "sleep" field.
func (auo *AgentUpdateOne) SetSleep(u uint32) *AgentUpdateOne {
	auo.mutation.ResetSleep()
	auo.mutation.SetSleep(u)
	return auo
}

// SetNillableSleep sets the "sleep" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableSleep(u *uint32) *AgentUpdateOne {
	if u != nil {
		auo.SetSleep(*u)
	}
	return auo
}

// AddSleep adds u to the "sleep" field.
func (auo *AgentUpdateOne) AddSleep(u int32) *AgentUpdateOne {
	auo.mutation.AddSleep(u)
	return auo
}

// SetJitter sets the "jitter" field.
func (auo *AgentUpdateOne) SetJitter(u uint8) *AgentUpdateOne {
	auo.mutation.ResetJitter()
	auo.mutation.SetJitter(u)
	return auo
}

// SetNillableJitter sets the "jitter" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableJitter(u *uint8) *AgentUpdateOne {
	if u != nil {
		auo.SetJitter(*u)
	}
	return auo
}

// AddJitter adds u to the "jitter" field.
func (auo *AgentUpdateOne) AddJitter(u int8) *AgentUpdateOne {
	auo.mutation.AddJitter(u)
	return auo
}

// SetFirst sets the "first" field.
func (auo *AgentUpdateOne) SetFirst(t time.Time) *AgentUpdateOne {
	auo.mutation.SetFirst(t)
	return auo
}

// SetNillableFirst sets the "first" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableFirst(t *time.Time) *AgentUpdateOne {
	if t != nil {
		auo.SetFirst(*t)
	}
	return auo
}

// SetLast sets the "last" field.
func (auo *AgentUpdateOne) SetLast(t time.Time) *AgentUpdateOne {
	auo.mutation.SetLast(t)
	return auo
}

// SetNillableLast sets the "last" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableLast(t *time.Time) *AgentUpdateOne {
	if t != nil {
		auo.SetLast(*t)
	}
	return auo
}

// SetCaps sets the "caps" field.
func (auo *AgentUpdateOne) SetCaps(u uint32) *AgentUpdateOne {
	auo.mutation.ResetCaps()
	auo.mutation.SetCaps(u)
	return auo
}

// SetNillableCaps sets the "caps" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableCaps(u *uint32) *AgentUpdateOne {
	if u != nil {
		auo.SetCaps(*u)
	}
	return auo
}

// AddCaps adds u to the "caps" field.
func (auo *AgentUpdateOne) AddCaps(u int32) *AgentUpdateOne {
	auo.mutation.AddCaps(u)
	return auo
}

// SetNote sets the "note" field.
func (auo *AgentUpdateOne) SetNote(s string) *AgentUpdateOne {
	auo.mutation.SetNote(s)
	return auo
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableNote(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetNote(*s)
	}
	return auo
}

// ClearNote clears the value of the "note" field.
func (auo *AgentUpdateOne) ClearNote() *AgentUpdateOne {
	auo.mutation.ClearNote()
	return auo
}

// SetColor sets the "color" field.
func (auo *AgentUpdateOne) SetColor(u uint32) *AgentUpdateOne {
	auo.mutation.ResetColor()
	auo.mutation.SetColor(u)
	return auo
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableColor(u *uint32) *AgentUpdateOne {
	if u != nil {
		auo.SetColor(*u)
	}
	return auo
}

// AddColor adds u to the "color" field.
func (auo *AgentUpdateOne) AddColor(u int32) *AgentUpdateOne {
	auo.mutation.AddColor(u)
	return auo
}

// SetListener sets the "listener" edge to the Listener entity.
func (auo *AgentUpdateOne) SetListener(l *Listener) *AgentUpdateOne {
	return auo.SetListenerID(l.ID)
}

// AddCommandIDs adds the "command" edge to the Command entity by IDs.
func (auo *AgentUpdateOne) AddCommandIDs(ids ...int64) *AgentUpdateOne {
	auo.mutation.AddCommandIDs(ids...)
	return auo
}

// AddCommand adds the "command" edges to the Command entity.
func (auo *AgentUpdateOne) AddCommand(c ...*Command) *AgentUpdateOne {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return auo.AddCommandIDs(ids...)
}

// AddTaskIDs adds the "task" edge to the Task entity by IDs.
func (auo *AgentUpdateOne) AddTaskIDs(ids ...int64) *AgentUpdateOne {
	auo.mutation.AddTaskIDs(ids...)
	return auo
}

// AddTask adds the "task" edges to the Task entity.
func (auo *AgentUpdateOne) AddTask(t ...*Task) *AgentUpdateOne {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.AddTaskIDs(ids...)
}

// Mutation returns the AgentMutation object of the builder.
func (auo *AgentUpdateOne) Mutation() *AgentMutation {
	return auo.mutation
}

// ClearListener clears the "listener" edge to the Listener entity.
func (auo *AgentUpdateOne) ClearListener() *AgentUpdateOne {
	auo.mutation.ClearListener()
	return auo
}

// ClearCommand clears all "command" edges to the Command entity.
func (auo *AgentUpdateOne) ClearCommand() *AgentUpdateOne {
	auo.mutation.ClearCommand()
	return auo
}

// RemoveCommandIDs removes the "command" edge to Command entities by IDs.
func (auo *AgentUpdateOne) RemoveCommandIDs(ids ...int64) *AgentUpdateOne {
	auo.mutation.RemoveCommandIDs(ids...)
	return auo
}

// RemoveCommand removes "command" edges to Command entities.
func (auo *AgentUpdateOne) RemoveCommand(c ...*Command) *AgentUpdateOne {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return auo.RemoveCommandIDs(ids...)
}

// ClearTask clears all "task" edges to the Task entity.
func (auo *AgentUpdateOne) ClearTask() *AgentUpdateOne {
	auo.mutation.ClearTask()
	return auo
}

// RemoveTaskIDs removes the "task" edge to Task entities by IDs.
func (auo *AgentUpdateOne) RemoveTaskIDs(ids ...int64) *AgentUpdateOne {
	auo.mutation.RemoveTaskIDs(ids...)
	return auo
}

// RemoveTask removes "task" edges to Task entities.
func (auo *AgentUpdateOne) RemoveTask(t ...*Task) *AgentUpdateOne {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.RemoveTaskIDs(ids...)
}

// Where appends a list predicates to the AgentUpdate builder.
func (auo *AgentUpdateOne) Where(ps ...predicate.Agent) *AgentUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AgentUpdateOne) Select(field string, fields ...string) *AgentUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Agent entity.
func (auo *AgentUpdateOne) Save(ctx context.Context) (*Agent, error) {
	if err := auo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AgentUpdateOne) SaveX(ctx context.Context) *Agent {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AgentUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AgentUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AgentUpdateOne) defaults() error {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		if agent.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized agent.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := agent.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (auo *AgentUpdateOne) check() error {
	if v, ok := auo.mutation.ExtIP(); ok {
		if err := agent.ExtIPValidator(v.String()); err != nil {
			return &ValidationError{Name: "ext_ip", err: fmt.Errorf(`ent: validator failed for field "Agent.ext_ip": %w`, err)}
		}
	}
	if v, ok := auo.mutation.IntIP(); ok {
		if err := agent.IntIPValidator(v.String()); err != nil {
			return &ValidationError{Name: "int_ip", err: fmt.Errorf(`ent: validator failed for field "Agent.int_ip": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Os(); ok {
		if err := agent.OsValidator(v); err != nil {
			return &ValidationError{Name: "os", err: fmt.Errorf(`ent: validator failed for field "Agent.os": %w`, err)}
		}
	}
	if v, ok := auo.mutation.OsMeta(); ok {
		if err := agent.OsMetaValidator(v); err != nil {
			return &ValidationError{Name: "os_meta", err: fmt.Errorf(`ent: validator failed for field "Agent.os_meta": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Hostname(); ok {
		if err := agent.HostnameValidator(v); err != nil {
			return &ValidationError{Name: "hostname", err: fmt.Errorf(`ent: validator failed for field "Agent.hostname": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Username(); ok {
		if err := agent.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Agent.username": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Domain(); ok {
		if err := agent.DomainValidator(v); err != nil {
			return &ValidationError{Name: "domain", err: fmt.Errorf(`ent: validator failed for field "Agent.domain": %w`, err)}
		}
	}
	if v, ok := auo.mutation.ProcessName(); ok {
		if err := agent.ProcessNameValidator(v); err != nil {
			return &ValidationError{Name: "process_name", err: fmt.Errorf(`ent: validator failed for field "Agent.process_name": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Arch(); ok {
		if err := agent.ArchValidator(v); err != nil {
			return &ValidationError{Name: "arch", err: fmt.Errorf(`ent: validator failed for field "Agent.arch": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Note(); ok {
		if err := agent.NoteValidator(v); err != nil {
			return &ValidationError{Name: "note", err: fmt.Errorf(`ent: validator failed for field "Agent.note": %w`, err)}
		}
	}
	if auo.mutation.ListenerCleared() && len(auo.mutation.ListenerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Agent.listener"`)
	}
	return nil
}

func (auo *AgentUpdateOne) sqlSave(ctx context.Context) (_node *Agent, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(agent.Table, agent.Columns, sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint32))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Agent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, agent.FieldID)
		for _, f := range fields {
			if !agent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != agent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(agent.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.DeletedAt(); ok {
		_spec.SetField(agent.FieldDeletedAt, field.TypeTime, value)
	}
	if auo.mutation.DeletedAtCleared() {
		_spec.ClearField(agent.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := auo.mutation.ExtIP(); ok {
		_spec.SetField(agent.FieldExtIP, field.TypeString, value)
	}
	if auo.mutation.ExtIPCleared() {
		_spec.ClearField(agent.FieldExtIP, field.TypeString)
	}
	if value, ok := auo.mutation.IntIP(); ok {
		_spec.SetField(agent.FieldIntIP, field.TypeString, value)
	}
	if auo.mutation.IntIPCleared() {
		_spec.ClearField(agent.FieldIntIP, field.TypeString)
	}
	if value, ok := auo.mutation.Os(); ok {
		_spec.SetField(agent.FieldOs, field.TypeEnum, value)
	}
	if value, ok := auo.mutation.OsMeta(); ok {
		_spec.SetField(agent.FieldOsMeta, field.TypeString, value)
	}
	if auo.mutation.OsMetaCleared() {
		_spec.ClearField(agent.FieldOsMeta, field.TypeString)
	}
	if value, ok := auo.mutation.Hostname(); ok {
		_spec.SetField(agent.FieldHostname, field.TypeString, value)
	}
	if auo.mutation.HostnameCleared() {
		_spec.ClearField(agent.FieldHostname, field.TypeString)
	}
	if value, ok := auo.mutation.Username(); ok {
		_spec.SetField(agent.FieldUsername, field.TypeString, value)
	}
	if auo.mutation.UsernameCleared() {
		_spec.ClearField(agent.FieldUsername, field.TypeString)
	}
	if value, ok := auo.mutation.Domain(); ok {
		_spec.SetField(agent.FieldDomain, field.TypeString, value)
	}
	if auo.mutation.DomainCleared() {
		_spec.ClearField(agent.FieldDomain, field.TypeString)
	}
	if value, ok := auo.mutation.Privileged(); ok {
		_spec.SetField(agent.FieldPrivileged, field.TypeBool, value)
	}
	if auo.mutation.PrivilegedCleared() {
		_spec.ClearField(agent.FieldPrivileged, field.TypeBool)
	}
	if value, ok := auo.mutation.ProcessName(); ok {
		_spec.SetField(agent.FieldProcessName, field.TypeString, value)
	}
	if auo.mutation.ProcessNameCleared() {
		_spec.ClearField(agent.FieldProcessName, field.TypeString)
	}
	if value, ok := auo.mutation.Pid(); ok {
		_spec.SetField(agent.FieldPid, field.TypeInt64, value)
	}
	if value, ok := auo.mutation.AddedPid(); ok {
		_spec.AddField(agent.FieldPid, field.TypeInt64, value)
	}
	if auo.mutation.PidCleared() {
		_spec.ClearField(agent.FieldPid, field.TypeInt64)
	}
	if value, ok := auo.mutation.Arch(); ok {
		_spec.SetField(agent.FieldArch, field.TypeEnum, value)
	}
	if value, ok := auo.mutation.Sleep(); ok {
		_spec.SetField(agent.FieldSleep, field.TypeUint32, value)
	}
	if value, ok := auo.mutation.AddedSleep(); ok {
		_spec.AddField(agent.FieldSleep, field.TypeUint32, value)
	}
	if value, ok := auo.mutation.Jitter(); ok {
		_spec.SetField(agent.FieldJitter, field.TypeUint8, value)
	}
	if value, ok := auo.mutation.AddedJitter(); ok {
		_spec.AddField(agent.FieldJitter, field.TypeUint8, value)
	}
	if value, ok := auo.mutation.First(); ok {
		_spec.SetField(agent.FieldFirst, field.TypeTime, value)
	}
	if value, ok := auo.mutation.Last(); ok {
		_spec.SetField(agent.FieldLast, field.TypeTime, value)
	}
	if value, ok := auo.mutation.Caps(); ok {
		_spec.SetField(agent.FieldCaps, field.TypeUint32, value)
	}
	if value, ok := auo.mutation.AddedCaps(); ok {
		_spec.AddField(agent.FieldCaps, field.TypeUint32, value)
	}
	if value, ok := auo.mutation.Note(); ok {
		_spec.SetField(agent.FieldNote, field.TypeString, value)
	}
	if auo.mutation.NoteCleared() {
		_spec.ClearField(agent.FieldNote, field.TypeString)
	}
	if value, ok := auo.mutation.Color(); ok {
		_spec.SetField(agent.FieldColor, field.TypeUint32, value)
	}
	if value, ok := auo.mutation.AddedColor(); ok {
		_spec.AddField(agent.FieldColor, field.TypeUint32, value)
	}
	if auo.mutation.ListenerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   agent.ListenerTable,
			Columns: []string{agent.ListenerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(listener.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ListenerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   agent.ListenerTable,
			Columns: []string{agent.ListenerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(listener.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.CommandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.CommandTable,
			Columns: []string{agent.CommandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(command.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedCommandIDs(); len(nodes) > 0 && !auo.mutation.CommandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.CommandTable,
			Columns: []string{agent.CommandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(command.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.CommandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.CommandTable,
			Columns: []string{agent.CommandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(command.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.TaskTable,
			Columns: []string{agent.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedTaskIDs(); len(nodes) > 0 && !auo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.TaskTable,
			Columns: []string{agent.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.TaskTable,
			Columns: []string{agent.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Agent{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{agent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
