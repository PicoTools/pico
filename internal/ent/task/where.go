// Code generated by ent, DO NOT EDIT.

package task

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/PicoTools/pico-shared/shared"
	"github.com/PicoTools/pico/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldID, id))
}

// CommandID applies equality check predicate on the "command_id" field. It's identical to CommandIDEQ.
func CommandID(v int64) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCommandID, v))
}

// AntID applies equality check predicate on the "ant_id" field. It's identical to AntIDEQ.
func AntID(v uint32) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAntID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCreatedAt, v))
}

// PushedAt applies equality check predicate on the "pushed_at" field. It's identical to PushedAtEQ.
func PushedAt(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldPushedAt, v))
}

// DoneAt applies equality check predicate on the "done_at" field. It's identical to DoneAtEQ.
func DoneAt(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldDoneAt, v))
}

// ArgsID applies equality check predicate on the "args_id" field. It's identical to ArgsIDEQ.
func ArgsID(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldArgsID, v))
}

// OutputID applies equality check predicate on the "output_id" field. It's identical to OutputIDEQ.
func OutputID(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldOutputID, v))
}

// OutputBig applies equality check predicate on the "output_big" field. It's identical to OutputBigEQ.
func OutputBig(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldOutputBig, v))
}

// CommandIDEQ applies the EQ predicate on the "command_id" field.
func CommandIDEQ(v int64) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCommandID, v))
}

// CommandIDNEQ applies the NEQ predicate on the "command_id" field.
func CommandIDNEQ(v int64) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldCommandID, v))
}

// CommandIDIn applies the In predicate on the "command_id" field.
func CommandIDIn(vs ...int64) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldCommandID, vs...))
}

// CommandIDNotIn applies the NotIn predicate on the "command_id" field.
func CommandIDNotIn(vs ...int64) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldCommandID, vs...))
}

// AntIDEQ applies the EQ predicate on the "ant_id" field.
func AntIDEQ(v uint32) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAntID, v))
}

// AntIDNEQ applies the NEQ predicate on the "ant_id" field.
func AntIDNEQ(v uint32) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldAntID, v))
}

// AntIDIn applies the In predicate on the "ant_id" field.
func AntIDIn(vs ...uint32) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldAntID, vs...))
}

// AntIDNotIn applies the NotIn predicate on the "ant_id" field.
func AntIDNotIn(vs ...uint32) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldAntID, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldCreatedAt, v))
}

// PushedAtEQ applies the EQ predicate on the "pushed_at" field.
func PushedAtEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldPushedAt, v))
}

// PushedAtNEQ applies the NEQ predicate on the "pushed_at" field.
func PushedAtNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldPushedAt, v))
}

// PushedAtIn applies the In predicate on the "pushed_at" field.
func PushedAtIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldPushedAt, vs...))
}

// PushedAtNotIn applies the NotIn predicate on the "pushed_at" field.
func PushedAtNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldPushedAt, vs...))
}

// PushedAtGT applies the GT predicate on the "pushed_at" field.
func PushedAtGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldPushedAt, v))
}

// PushedAtGTE applies the GTE predicate on the "pushed_at" field.
func PushedAtGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldPushedAt, v))
}

// PushedAtLT applies the LT predicate on the "pushed_at" field.
func PushedAtLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldPushedAt, v))
}

// PushedAtLTE applies the LTE predicate on the "pushed_at" field.
func PushedAtLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldPushedAt, v))
}

// PushedAtIsNil applies the IsNil predicate on the "pushed_at" field.
func PushedAtIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldPushedAt))
}

// PushedAtNotNil applies the NotNil predicate on the "pushed_at" field.
func PushedAtNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldPushedAt))
}

// DoneAtEQ applies the EQ predicate on the "done_at" field.
func DoneAtEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldDoneAt, v))
}

// DoneAtNEQ applies the NEQ predicate on the "done_at" field.
func DoneAtNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldDoneAt, v))
}

// DoneAtIn applies the In predicate on the "done_at" field.
func DoneAtIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldDoneAt, vs...))
}

// DoneAtNotIn applies the NotIn predicate on the "done_at" field.
func DoneAtNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldDoneAt, vs...))
}

// DoneAtGT applies the GT predicate on the "done_at" field.
func DoneAtGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldDoneAt, v))
}

// DoneAtGTE applies the GTE predicate on the "done_at" field.
func DoneAtGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldDoneAt, v))
}

// DoneAtLT applies the LT predicate on the "done_at" field.
func DoneAtLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldDoneAt, v))
}

// DoneAtLTE applies the LTE predicate on the "done_at" field.
func DoneAtLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldDoneAt, v))
}

// DoneAtIsNil applies the IsNil predicate on the "done_at" field.
func DoneAtIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldDoneAt))
}

// DoneAtNotNil applies the NotNil predicate on the "done_at" field.
func DoneAtNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldDoneAt))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v shared.TaskStatus) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v shared.TaskStatus) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...shared.TaskStatus) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...shared.TaskStatus) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldStatus, vs...))
}

// CapEQ applies the EQ predicate on the "cap" field.
func CapEQ(v shared.Capability) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCap, v))
}

// CapNEQ applies the NEQ predicate on the "cap" field.
func CapNEQ(v shared.Capability) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldCap, v))
}

// CapIn applies the In predicate on the "cap" field.
func CapIn(vs ...shared.Capability) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldCap, vs...))
}

// CapNotIn applies the NotIn predicate on the "cap" field.
func CapNotIn(vs ...shared.Capability) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldCap, vs...))
}

// ArgsIDEQ applies the EQ predicate on the "args_id" field.
func ArgsIDEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldArgsID, v))
}

// ArgsIDNEQ applies the NEQ predicate on the "args_id" field.
func ArgsIDNEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldArgsID, v))
}

// ArgsIDIn applies the In predicate on the "args_id" field.
func ArgsIDIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldArgsID, vs...))
}

// ArgsIDNotIn applies the NotIn predicate on the "args_id" field.
func ArgsIDNotIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldArgsID, vs...))
}

// OutputIDEQ applies the EQ predicate on the "output_id" field.
func OutputIDEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldOutputID, v))
}

// OutputIDNEQ applies the NEQ predicate on the "output_id" field.
func OutputIDNEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldOutputID, v))
}

// OutputIDIn applies the In predicate on the "output_id" field.
func OutputIDIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldOutputID, vs...))
}

// OutputIDNotIn applies the NotIn predicate on the "output_id" field.
func OutputIDNotIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldOutputID, vs...))
}

// OutputIDIsNil applies the IsNil predicate on the "output_id" field.
func OutputIDIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldOutputID))
}

// OutputIDNotNil applies the NotNil predicate on the "output_id" field.
func OutputIDNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldOutputID))
}

// OutputBigEQ applies the EQ predicate on the "output_big" field.
func OutputBigEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldOutputBig, v))
}

// OutputBigNEQ applies the NEQ predicate on the "output_big" field.
func OutputBigNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldOutputBig, v))
}

// OutputBigIsNil applies the IsNil predicate on the "output_big" field.
func OutputBigIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldOutputBig))
}

// OutputBigNotNil applies the NotNil predicate on the "output_big" field.
func OutputBigNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldOutputBig))
}

// HasCommand applies the HasEdge predicate on the "command" edge.
func HasCommand() predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CommandTable, CommandColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCommandWith applies the HasEdge predicate on the "command" edge with a given conditions (other predicates).
func HasCommandWith(preds ...predicate.Command) predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := newCommandStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAnt applies the HasEdge predicate on the "ant" edge.
func HasAnt() predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AntTable, AntColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAntWith applies the HasEdge predicate on the "ant" edge with a given conditions (other predicates).
func HasAntWith(preds ...predicate.Ant) predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := newAntStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBlobberArgs applies the HasEdge predicate on the "blobber_args" edge.
func HasBlobberArgs() predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BlobberArgsTable, BlobberArgsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlobberArgsWith applies the HasEdge predicate on the "blobber_args" edge with a given conditions (other predicates).
func HasBlobberArgsWith(preds ...predicate.Blobber) predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := newBlobberArgsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBlobberOutput applies the HasEdge predicate on the "blobber_output" edge.
func HasBlobberOutput() predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BlobberOutputTable, BlobberOutputColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlobberOutputWith applies the HasEdge predicate on the "blobber_output" edge with a given conditions (other predicates).
func HasBlobberOutputWith(preds ...predicate.Blobber) predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := newBlobberOutputStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Task) predicate.Task {
	return predicate.Task(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Task) predicate.Task {
	return predicate.Task(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Task) predicate.Task {
	return predicate.Task(sql.NotPredicates(p))
}
