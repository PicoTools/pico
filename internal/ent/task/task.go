// Code generated by ent, DO NOT EDIT.

package task

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/PicoTools/pico-shared/shared"
)

const (
	// Label holds the string label denoting the task type in the database.
	Label = "task"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCommandID holds the string denoting the command_id field in the database.
	FieldCommandID = "command_id"
	// FieldAgentID holds the string denoting the agent_id field in the database.
	FieldAgentID = "agent_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldPushedAt holds the string denoting the pushed_at field in the database.
	FieldPushedAt = "pushed_at"
	// FieldDoneAt holds the string denoting the done_at field in the database.
	FieldDoneAt = "done_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCap holds the string denoting the cap field in the database.
	FieldCap = "cap"
	// FieldArgsID holds the string denoting the args_id field in the database.
	FieldArgsID = "args_id"
	// FieldOutputID holds the string denoting the output_id field in the database.
	FieldOutputID = "output_id"
	// FieldOutputBig holds the string denoting the output_big field in the database.
	FieldOutputBig = "output_big"
	// EdgeCommand holds the string denoting the command edge name in mutations.
	EdgeCommand = "command"
	// EdgeAgent holds the string denoting the agent edge name in mutations.
	EdgeAgent = "agent"
	// EdgeBlobberArgs holds the string denoting the blobber_args edge name in mutations.
	EdgeBlobberArgs = "blobber_args"
	// EdgeBlobberOutput holds the string denoting the blobber_output edge name in mutations.
	EdgeBlobberOutput = "blobber_output"
	// Table holds the table name of the task in the database.
	Table = "task"
	// CommandTable is the table that holds the command relation/edge.
	CommandTable = "task"
	// CommandInverseTable is the table name for the Command entity.
	// It exists in this package in order to avoid circular dependency with the "command" package.
	CommandInverseTable = "command"
	// CommandColumn is the table column denoting the command relation/edge.
	CommandColumn = "command_id"
	// AgentTable is the table that holds the agent relation/edge.
	AgentTable = "task"
	// AgentInverseTable is the table name for the Agent entity.
	// It exists in this package in order to avoid circular dependency with the "agent" package.
	AgentInverseTable = "agent"
	// AgentColumn is the table column denoting the agent relation/edge.
	AgentColumn = "agent_id"
	// BlobberArgsTable is the table that holds the blobber_args relation/edge.
	BlobberArgsTable = "task"
	// BlobberArgsInverseTable is the table name for the Blobber entity.
	// It exists in this package in order to avoid circular dependency with the "blobber" package.
	BlobberArgsInverseTable = "blobber"
	// BlobberArgsColumn is the table column denoting the blobber_args relation/edge.
	BlobberArgsColumn = "args_id"
	// BlobberOutputTable is the table that holds the blobber_output relation/edge.
	BlobberOutputTable = "task"
	// BlobberOutputInverseTable is the table name for the Blobber entity.
	// It exists in this package in order to avoid circular dependency with the "blobber" package.
	BlobberOutputInverseTable = "blobber"
	// BlobberOutputColumn is the table column denoting the blobber_output relation/edge.
	BlobberOutputColumn = "output_id"
)

// Columns holds all SQL columns for task fields.
var Columns = []string{
	FieldID,
	FieldCommandID,
	FieldAgentID,
	FieldCreatedAt,
	FieldPushedAt,
	FieldDoneAt,
	FieldStatus,
	FieldCap,
	FieldArgsID,
	FieldOutputID,
	FieldOutputBig,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s shared.TaskStatus) error {
	switch s.String() {
	case "new", "in-progress", "cancelled", "success", "error":
		return nil
	default:
		return fmt.Errorf("task: invalid enum value for status field: %q", s)
	}
}

// CapValidator is a validator for the "cap" field enum values. It is called by the builders before save.
func CapValidator(c shared.Capability) error {
	switch c.String() {
	case "c_sleep", "c_ls", "c_pwd", "c_cd", "c_whoami", "c_ps", "c_cat", "c_exec", "c_cp", "c_jobs", "c_jobkill", "c_kill", "c_mv", "c_mkdir", "c_rm", "c_exec_assembly", "c_shell", "c_ppid", "c_exec_detach", "c_shellcode_injection", "c_download", "c_upload", "c_pause", "c_destroy", "c_exit":
		return nil
	default:
		return fmt.Errorf("task: invalid enum value for cap field: %q", c)
	}
}

// OrderOption defines the ordering options for the Task queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCommandID orders the results by the command_id field.
func ByCommandID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommandID, opts...).ToFunc()
}

// ByAgentID orders the results by the agent_id field.
func ByAgentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAgentID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByPushedAt orders the results by the pushed_at field.
func ByPushedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPushedAt, opts...).ToFunc()
}

// ByDoneAt orders the results by the done_at field.
func ByDoneAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDoneAt, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCap orders the results by the cap field.
func ByCap(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCap, opts...).ToFunc()
}

// ByArgsID orders the results by the args_id field.
func ByArgsID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArgsID, opts...).ToFunc()
}

// ByOutputID orders the results by the output_id field.
func ByOutputID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOutputID, opts...).ToFunc()
}

// ByOutputBig orders the results by the output_big field.
func ByOutputBig(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOutputBig, opts...).ToFunc()
}

// ByCommandField orders the results by command field.
func ByCommandField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommandStep(), sql.OrderByField(field, opts...))
	}
}

// ByAgentField orders the results by agent field.
func ByAgentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAgentStep(), sql.OrderByField(field, opts...))
	}
}

// ByBlobberArgsField orders the results by blobber_args field.
func ByBlobberArgsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlobberArgsStep(), sql.OrderByField(field, opts...))
	}
}

// ByBlobberOutputField orders the results by blobber_output field.
func ByBlobberOutputField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlobberOutputStep(), sql.OrderByField(field, opts...))
	}
}
func newCommandStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommandInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CommandTable, CommandColumn),
	)
}
func newAgentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AgentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AgentTable, AgentColumn),
	)
}
func newBlobberArgsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlobberArgsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BlobberArgsTable, BlobberArgsColumn),
	)
}
func newBlobberOutputStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlobberOutputInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BlobberOutputTable, BlobberOutputColumn),
	)
}
