// Code generated by ent, DO NOT EDIT.

package message

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/PicoTools/pico/pkg/shared"
)

const (
	// Label holds the string label denoting the message type in the database.
	Label = "message"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCommandID holds the string denoting the command_id field in the database.
	FieldCommandID = "command_id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldMessage holds the string denoting the message field in the database.
	FieldMessage = "message"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeCommand holds the string denoting the command edge name in mutations.
	EdgeCommand = "command"
	// Table holds the table name of the message in the database.
	Table = "message"
	// CommandTable is the table that holds the command relation/edge.
	CommandTable = "message"
	// CommandInverseTable is the table name for the Command entity.
	// It exists in this package in order to avoid circular dependency with the "command" package.
	CommandInverseTable = "command"
	// CommandColumn is the table column denoting the command relation/edge.
	CommandColumn = "command_id"
)

// Columns holds all SQL columns for message fields.
var Columns = []string{
	FieldID,
	FieldCommandID,
	FieldType,
	FieldMessage,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// MessageValidator is a validator for the "message" field. It is called by the builders before save.
	MessageValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type shared.TaskMessage) error {
	switch _type.String() {
	case "notify", "info", "warning", "error":
		return nil
	default:
		return fmt.Errorf("message: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Message queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCommandID orders the results by the command_id field.
func ByCommandID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommandID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByMessage orders the results by the message field.
func ByMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMessage, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByCommandField orders the results by command field.
func ByCommandField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommandStep(), sql.OrderByField(field, opts...))
	}
}
func newCommandStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommandInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CommandTable, CommandColumn),
	)
}
