// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/PicoTools/pico-shared/shared"
	"github.com/PicoTools/pico/internal/ent/ant"
	"github.com/PicoTools/pico/internal/ent/listener"
	"github.com/PicoTools/pico/internal/types"
)

// Ant is the model entity for the Ant schema.
type Ant struct {
	config `json:"-"`
	// ID of the ent.
	// ant ID
	ID uint32 `json:"id,omitempty"`
	// Time when entity was created
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Time when entity was updated
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Time when entity was soft-deleted
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// linked listener ID
	ListenerID int64 `json:"listener_id,omitempty"`
	// external IP address of ant
	ExtIP types.Inet `json:"ext_ip,omitempty"`
	// internal IP address of ant
	IntIP types.Inet `json:"int_ip,omitempty"`
	// type of operating system
	Os shared.AntOs `json:"os,omitempty"`
	// metadata of operating system
	OsMeta string `json:"os_meta,omitempty"`
	// hostname of machine, on which ant deployed
	Hostname string `json:"hostname,omitempty"`
	// username of ant's process
	Username string `json:"username,omitempty"`
	// domain of machine, on which ant deployed
	Domain string `json:"domain,omitempty"`
	// is ant process is privileged
	Privileged bool `json:"privileged,omitempty"`
	// name of ant process
	ProcessName string `json:"process_name,omitempty"`
	// process ID of ant
	Pid int64 `json:"pid,omitempty"`
	// architecture of ant process
	Arch shared.AntArch `json:"arch,omitempty"`
	// sleep value of ant
	Sleep uint32 `json:"sleep,omitempty"`
	// jitter value of sleep
	Jitter uint8 `json:"jitter,omitempty"`
	// first checkout timestamp
	First time.Time `json:"first,omitempty"`
	// last activity of listener
	Last time.Time `json:"last,omitempty"`
	// capabilities of ant
	Caps uint32 `json:"caps,omitempty"`
	// note of ant
	Note string `json:"note,omitempty"`
	// color of entity
	Color uint32 `json:"color,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AntQuery when eager-loading is set.
	Edges        AntEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AntEdges holds the relations/edges for other nodes in the graph.
type AntEdges struct {
	// Listener holds the value of the listener edge.
	Listener *Listener `json:"listener,omitempty"`
	// Command holds the value of the command edge.
	Command []*Command `json:"command,omitempty"`
	// Task holds the value of the task edge.
	Task []*Task `json:"task,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ListenerOrErr returns the Listener value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AntEdges) ListenerOrErr() (*Listener, error) {
	if e.Listener != nil {
		return e.Listener, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: listener.Label}
	}
	return nil, &NotLoadedError{edge: "listener"}
}

// CommandOrErr returns the Command value or an error if the edge
// was not loaded in eager-loading.
func (e AntEdges) CommandOrErr() ([]*Command, error) {
	if e.loadedTypes[1] {
		return e.Command, nil
	}
	return nil, &NotLoadedError{edge: "command"}
}

// TaskOrErr returns the Task value or an error if the edge
// was not loaded in eager-loading.
func (e AntEdges) TaskOrErr() ([]*Task, error) {
	if e.loadedTypes[2] {
		return e.Task, nil
	}
	return nil, &NotLoadedError{edge: "task"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Ant) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ant.FieldArch:
			values[i] = new(shared.AntArch)
		case ant.FieldOs:
			values[i] = new(shared.AntOs)
		case ant.FieldPrivileged:
			values[i] = new(sql.NullBool)
		case ant.FieldID, ant.FieldListenerID, ant.FieldPid, ant.FieldSleep, ant.FieldJitter, ant.FieldCaps, ant.FieldColor:
			values[i] = new(sql.NullInt64)
		case ant.FieldOsMeta, ant.FieldHostname, ant.FieldUsername, ant.FieldDomain, ant.FieldProcessName, ant.FieldNote:
			values[i] = new(sql.NullString)
		case ant.FieldCreatedAt, ant.FieldUpdatedAt, ant.FieldDeletedAt, ant.FieldFirst, ant.FieldLast:
			values[i] = new(sql.NullTime)
		case ant.FieldExtIP, ant.FieldIntIP:
			values[i] = new(types.Inet)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Ant fields.
func (a *Ant) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ant.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = uint32(value.Int64)
		case ant.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case ant.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case ant.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				a.DeletedAt = value.Time
			}
		case ant.FieldListenerID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field listener_id", values[i])
			} else if value.Valid {
				a.ListenerID = value.Int64
			}
		case ant.FieldExtIP:
			if value, ok := values[i].(*types.Inet); !ok {
				return fmt.Errorf("unexpected type %T for field ext_ip", values[i])
			} else if value != nil {
				a.ExtIP = *value
			}
		case ant.FieldIntIP:
			if value, ok := values[i].(*types.Inet); !ok {
				return fmt.Errorf("unexpected type %T for field int_ip", values[i])
			} else if value != nil {
				a.IntIP = *value
			}
		case ant.FieldOs:
			if value, ok := values[i].(*shared.AntOs); !ok {
				return fmt.Errorf("unexpected type %T for field os", values[i])
			} else if value != nil {
				a.Os = *value
			}
		case ant.FieldOsMeta:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field os_meta", values[i])
			} else if value.Valid {
				a.OsMeta = value.String
			}
		case ant.FieldHostname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hostname", values[i])
			} else if value.Valid {
				a.Hostname = value.String
			}
		case ant.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				a.Username = value.String
			}
		case ant.FieldDomain:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field domain", values[i])
			} else if value.Valid {
				a.Domain = value.String
			}
		case ant.FieldPrivileged:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field privileged", values[i])
			} else if value.Valid {
				a.Privileged = value.Bool
			}
		case ant.FieldProcessName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field process_name", values[i])
			} else if value.Valid {
				a.ProcessName = value.String
			}
		case ant.FieldPid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pid", values[i])
			} else if value.Valid {
				a.Pid = value.Int64
			}
		case ant.FieldArch:
			if value, ok := values[i].(*shared.AntArch); !ok {
				return fmt.Errorf("unexpected type %T for field arch", values[i])
			} else if value != nil {
				a.Arch = *value
			}
		case ant.FieldSleep:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sleep", values[i])
			} else if value.Valid {
				a.Sleep = uint32(value.Int64)
			}
		case ant.FieldJitter:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field jitter", values[i])
			} else if value.Valid {
				a.Jitter = uint8(value.Int64)
			}
		case ant.FieldFirst:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field first", values[i])
			} else if value.Valid {
				a.First = value.Time
			}
		case ant.FieldLast:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last", values[i])
			} else if value.Valid {
				a.Last = value.Time
			}
		case ant.FieldCaps:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field caps", values[i])
			} else if value.Valid {
				a.Caps = uint32(value.Int64)
			}
		case ant.FieldNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field note", values[i])
			} else if value.Valid {
				a.Note = value.String
			}
		case ant.FieldColor:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field color", values[i])
			} else if value.Valid {
				a.Color = uint32(value.Int64)
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Ant.
// This includes values selected through modifiers, order, etc.
func (a *Ant) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryListener queries the "listener" edge of the Ant entity.
func (a *Ant) QueryListener() *ListenerQuery {
	return NewAntClient(a.config).QueryListener(a)
}

// QueryCommand queries the "command" edge of the Ant entity.
func (a *Ant) QueryCommand() *CommandQuery {
	return NewAntClient(a.config).QueryCommand(a)
}

// QueryTask queries the "task" edge of the Ant entity.
func (a *Ant) QueryTask() *TaskQuery {
	return NewAntClient(a.config).QueryTask(a)
}

// Update returns a builder for updating this Ant.
// Note that you need to call Ant.Unwrap() before calling this method if this Ant
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Ant) Update() *AntUpdateOne {
	return NewAntClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Ant entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Ant) Unwrap() *Ant {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Ant is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Ant) String() string {
	var builder strings.Builder
	builder.WriteString("Ant(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(a.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("listener_id=")
	builder.WriteString(fmt.Sprintf("%v", a.ListenerID))
	builder.WriteString(", ")
	builder.WriteString("ext_ip=")
	builder.WriteString(fmt.Sprintf("%v", a.ExtIP))
	builder.WriteString(", ")
	builder.WriteString("int_ip=")
	builder.WriteString(fmt.Sprintf("%v", a.IntIP))
	builder.WriteString(", ")
	builder.WriteString("os=")
	builder.WriteString(fmt.Sprintf("%v", a.Os))
	builder.WriteString(", ")
	builder.WriteString("os_meta=")
	builder.WriteString(a.OsMeta)
	builder.WriteString(", ")
	builder.WriteString("hostname=")
	builder.WriteString(a.Hostname)
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(a.Username)
	builder.WriteString(", ")
	builder.WriteString("domain=")
	builder.WriteString(a.Domain)
	builder.WriteString(", ")
	builder.WriteString("privileged=")
	builder.WriteString(fmt.Sprintf("%v", a.Privileged))
	builder.WriteString(", ")
	builder.WriteString("process_name=")
	builder.WriteString(a.ProcessName)
	builder.WriteString(", ")
	builder.WriteString("pid=")
	builder.WriteString(fmt.Sprintf("%v", a.Pid))
	builder.WriteString(", ")
	builder.WriteString("arch=")
	builder.WriteString(fmt.Sprintf("%v", a.Arch))
	builder.WriteString(", ")
	builder.WriteString("sleep=")
	builder.WriteString(fmt.Sprintf("%v", a.Sleep))
	builder.WriteString(", ")
	builder.WriteString("jitter=")
	builder.WriteString(fmt.Sprintf("%v", a.Jitter))
	builder.WriteString(", ")
	builder.WriteString("first=")
	builder.WriteString(a.First.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last=")
	builder.WriteString(a.Last.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("caps=")
	builder.WriteString(fmt.Sprintf("%v", a.Caps))
	builder.WriteString(", ")
	builder.WriteString("note=")
	builder.WriteString(a.Note)
	builder.WriteString(", ")
	builder.WriteString("color=")
	builder.WriteString(fmt.Sprintf("%v", a.Color))
	builder.WriteByte(')')
	return builder.String()
}

// Ants is a parsable slice of Ant.
type Ants []*Ant
