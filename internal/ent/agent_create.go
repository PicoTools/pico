// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/PicoTools/pico/internal/ent/agent"
	"github.com/PicoTools/pico/internal/ent/command"
	"github.com/PicoTools/pico/internal/ent/listener"
	"github.com/PicoTools/pico/internal/ent/task"
	"github.com/PicoTools/pico/internal/types"
	"github.com/PicoTools/pico/pkg/shared"
)

// AgentCreate is the builder for creating a Agent entity.
type AgentCreate struct {
	config
	mutation *AgentMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ac *AgentCreate) SetCreatedAt(t time.Time) *AgentCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AgentCreate) SetNillableCreatedAt(t *time.Time) *AgentCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AgentCreate) SetUpdatedAt(t time.Time) *AgentCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AgentCreate) SetNillableUpdatedAt(t *time.Time) *AgentCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetDeletedAt sets the "deleted_at" field.
func (ac *AgentCreate) SetDeletedAt(t time.Time) *AgentCreate {
	ac.mutation.SetDeletedAt(t)
	return ac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ac *AgentCreate) SetNillableDeletedAt(t *time.Time) *AgentCreate {
	if t != nil {
		ac.SetDeletedAt(*t)
	}
	return ac
}

// SetListenerID sets the "listener_id" field.
func (ac *AgentCreate) SetListenerID(i int64) *AgentCreate {
	ac.mutation.SetListenerID(i)
	return ac
}

// SetExtIP sets the "ext_ip" field.
func (ac *AgentCreate) SetExtIP(t types.Inet) *AgentCreate {
	ac.mutation.SetExtIP(t)
	return ac
}

// SetNillableExtIP sets the "ext_ip" field if the given value is not nil.
func (ac *AgentCreate) SetNillableExtIP(t *types.Inet) *AgentCreate {
	if t != nil {
		ac.SetExtIP(*t)
	}
	return ac
}

// SetIntIP sets the "int_ip" field.
func (ac *AgentCreate) SetIntIP(t types.Inet) *AgentCreate {
	ac.mutation.SetIntIP(t)
	return ac
}

// SetNillableIntIP sets the "int_ip" field if the given value is not nil.
func (ac *AgentCreate) SetNillableIntIP(t *types.Inet) *AgentCreate {
	if t != nil {
		ac.SetIntIP(*t)
	}
	return ac
}

// SetOs sets the "os" field.
func (ac *AgentCreate) SetOs(so shared.AgentOs) *AgentCreate {
	ac.mutation.SetOs(so)
	return ac
}

// SetOsMeta sets the "os_meta" field.
func (ac *AgentCreate) SetOsMeta(s string) *AgentCreate {
	ac.mutation.SetOsMeta(s)
	return ac
}

// SetNillableOsMeta sets the "os_meta" field if the given value is not nil.
func (ac *AgentCreate) SetNillableOsMeta(s *string) *AgentCreate {
	if s != nil {
		ac.SetOsMeta(*s)
	}
	return ac
}

// SetHostname sets the "hostname" field.
func (ac *AgentCreate) SetHostname(s string) *AgentCreate {
	ac.mutation.SetHostname(s)
	return ac
}

// SetNillableHostname sets the "hostname" field if the given value is not nil.
func (ac *AgentCreate) SetNillableHostname(s *string) *AgentCreate {
	if s != nil {
		ac.SetHostname(*s)
	}
	return ac
}

// SetUsername sets the "username" field.
func (ac *AgentCreate) SetUsername(s string) *AgentCreate {
	ac.mutation.SetUsername(s)
	return ac
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (ac *AgentCreate) SetNillableUsername(s *string) *AgentCreate {
	if s != nil {
		ac.SetUsername(*s)
	}
	return ac
}

// SetDomain sets the "domain" field.
func (ac *AgentCreate) SetDomain(s string) *AgentCreate {
	ac.mutation.SetDomain(s)
	return ac
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (ac *AgentCreate) SetNillableDomain(s *string) *AgentCreate {
	if s != nil {
		ac.SetDomain(*s)
	}
	return ac
}

// SetPrivileged sets the "privileged" field.
func (ac *AgentCreate) SetPrivileged(b bool) *AgentCreate {
	ac.mutation.SetPrivileged(b)
	return ac
}

// SetNillablePrivileged sets the "privileged" field if the given value is not nil.
func (ac *AgentCreate) SetNillablePrivileged(b *bool) *AgentCreate {
	if b != nil {
		ac.SetPrivileged(*b)
	}
	return ac
}

// SetProcessName sets the "process_name" field.
func (ac *AgentCreate) SetProcessName(s string) *AgentCreate {
	ac.mutation.SetProcessName(s)
	return ac
}

// SetNillableProcessName sets the "process_name" field if the given value is not nil.
func (ac *AgentCreate) SetNillableProcessName(s *string) *AgentCreate {
	if s != nil {
		ac.SetProcessName(*s)
	}
	return ac
}

// SetPid sets the "pid" field.
func (ac *AgentCreate) SetPid(i int64) *AgentCreate {
	ac.mutation.SetPid(i)
	return ac
}

// SetNillablePid sets the "pid" field if the given value is not nil.
func (ac *AgentCreate) SetNillablePid(i *int64) *AgentCreate {
	if i != nil {
		ac.SetPid(*i)
	}
	return ac
}

// SetArch sets the "arch" field.
func (ac *AgentCreate) SetArch(sa shared.AgentArch) *AgentCreate {
	ac.mutation.SetArch(sa)
	return ac
}

// SetSleep sets the "sleep" field.
func (ac *AgentCreate) SetSleep(u uint32) *AgentCreate {
	ac.mutation.SetSleep(u)
	return ac
}

// SetJitter sets the "jitter" field.
func (ac *AgentCreate) SetJitter(u uint8) *AgentCreate {
	ac.mutation.SetJitter(u)
	return ac
}

// SetFirst sets the "first" field.
func (ac *AgentCreate) SetFirst(t time.Time) *AgentCreate {
	ac.mutation.SetFirst(t)
	return ac
}

// SetNillableFirst sets the "first" field if the given value is not nil.
func (ac *AgentCreate) SetNillableFirst(t *time.Time) *AgentCreate {
	if t != nil {
		ac.SetFirst(*t)
	}
	return ac
}

// SetLast sets the "last" field.
func (ac *AgentCreate) SetLast(t time.Time) *AgentCreate {
	ac.mutation.SetLast(t)
	return ac
}

// SetNillableLast sets the "last" field if the given value is not nil.
func (ac *AgentCreate) SetNillableLast(t *time.Time) *AgentCreate {
	if t != nil {
		ac.SetLast(*t)
	}
	return ac
}

// SetCaps sets the "caps" field.
func (ac *AgentCreate) SetCaps(u uint32) *AgentCreate {
	ac.mutation.SetCaps(u)
	return ac
}

// SetNote sets the "note" field.
func (ac *AgentCreate) SetNote(s string) *AgentCreate {
	ac.mutation.SetNote(s)
	return ac
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (ac *AgentCreate) SetNillableNote(s *string) *AgentCreate {
	if s != nil {
		ac.SetNote(*s)
	}
	return ac
}

// SetColor sets the "color" field.
func (ac *AgentCreate) SetColor(u uint32) *AgentCreate {
	ac.mutation.SetColor(u)
	return ac
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (ac *AgentCreate) SetNillableColor(u *uint32) *AgentCreate {
	if u != nil {
		ac.SetColor(*u)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AgentCreate) SetID(u uint32) *AgentCreate {
	ac.mutation.SetID(u)
	return ac
}

// SetListener sets the "listener" edge to the Listener entity.
func (ac *AgentCreate) SetListener(l *Listener) *AgentCreate {
	return ac.SetListenerID(l.ID)
}

// AddCommandIDs adds the "command" edge to the Command entity by IDs.
func (ac *AgentCreate) AddCommandIDs(ids ...int64) *AgentCreate {
	ac.mutation.AddCommandIDs(ids...)
	return ac
}

// AddCommand adds the "command" edges to the Command entity.
func (ac *AgentCreate) AddCommand(c ...*Command) *AgentCreate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ac.AddCommandIDs(ids...)
}

// AddTaskIDs adds the "task" edge to the Task entity by IDs.
func (ac *AgentCreate) AddTaskIDs(ids ...int64) *AgentCreate {
	ac.mutation.AddTaskIDs(ids...)
	return ac
}

// AddTask adds the "task" edges to the Task entity.
func (ac *AgentCreate) AddTask(t ...*Task) *AgentCreate {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ac.AddTaskIDs(ids...)
}

// Mutation returns the AgentMutation object of the builder.
func (ac *AgentCreate) Mutation() *AgentMutation {
	return ac.mutation
}

// Save creates the Agent in the database.
func (ac *AgentCreate) Save(ctx context.Context) (*Agent, error) {
	if err := ac.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AgentCreate) SaveX(ctx context.Context) *Agent {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AgentCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AgentCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AgentCreate) defaults() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		if agent.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized agent.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := agent.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		if agent.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized agent.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := agent.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.First(); !ok {
		if agent.DefaultFirst == nil {
			return fmt.Errorf("ent: uninitialized agent.DefaultFirst (forgotten import ent/runtime?)")
		}
		v := agent.DefaultFirst()
		ac.mutation.SetFirst(v)
	}
	if _, ok := ac.mutation.Last(); !ok {
		if agent.DefaultLast == nil {
			return fmt.Errorf("ent: uninitialized agent.DefaultLast (forgotten import ent/runtime?)")
		}
		v := agent.DefaultLast()
		ac.mutation.SetLast(v)
	}
	if _, ok := ac.mutation.Color(); !ok {
		v := agent.DefaultColor
		ac.mutation.SetColor(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ac *AgentCreate) check() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Agent.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Agent.updated_at"`)}
	}
	if _, ok := ac.mutation.ListenerID(); !ok {
		return &ValidationError{Name: "listener_id", err: errors.New(`ent: missing required field "Agent.listener_id"`)}
	}
	if v, ok := ac.mutation.ExtIP(); ok {
		if err := agent.ExtIPValidator(v.String()); err != nil {
			return &ValidationError{Name: "ext_ip", err: fmt.Errorf(`ent: validator failed for field "Agent.ext_ip": %w`, err)}
		}
	}
	if v, ok := ac.mutation.IntIP(); ok {
		if err := agent.IntIPValidator(v.String()); err != nil {
			return &ValidationError{Name: "int_ip", err: fmt.Errorf(`ent: validator failed for field "Agent.int_ip": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Os(); !ok {
		return &ValidationError{Name: "os", err: errors.New(`ent: missing required field "Agent.os"`)}
	}
	if v, ok := ac.mutation.Os(); ok {
		if err := agent.OsValidator(v); err != nil {
			return &ValidationError{Name: "os", err: fmt.Errorf(`ent: validator failed for field "Agent.os": %w`, err)}
		}
	}
	if v, ok := ac.mutation.OsMeta(); ok {
		if err := agent.OsMetaValidator(v); err != nil {
			return &ValidationError{Name: "os_meta", err: fmt.Errorf(`ent: validator failed for field "Agent.os_meta": %w`, err)}
		}
	}
	if v, ok := ac.mutation.Hostname(); ok {
		if err := agent.HostnameValidator(v); err != nil {
			return &ValidationError{Name: "hostname", err: fmt.Errorf(`ent: validator failed for field "Agent.hostname": %w`, err)}
		}
	}
	if v, ok := ac.mutation.Username(); ok {
		if err := agent.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Agent.username": %w`, err)}
		}
	}
	if v, ok := ac.mutation.Domain(); ok {
		if err := agent.DomainValidator(v); err != nil {
			return &ValidationError{Name: "domain", err: fmt.Errorf(`ent: validator failed for field "Agent.domain": %w`, err)}
		}
	}
	if v, ok := ac.mutation.ProcessName(); ok {
		if err := agent.ProcessNameValidator(v); err != nil {
			return &ValidationError{Name: "process_name", err: fmt.Errorf(`ent: validator failed for field "Agent.process_name": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Arch(); !ok {
		return &ValidationError{Name: "arch", err: errors.New(`ent: missing required field "Agent.arch"`)}
	}
	if v, ok := ac.mutation.Arch(); ok {
		if err := agent.ArchValidator(v); err != nil {
			return &ValidationError{Name: "arch", err: fmt.Errorf(`ent: validator failed for field "Agent.arch": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Sleep(); !ok {
		return &ValidationError{Name: "sleep", err: errors.New(`ent: missing required field "Agent.sleep"`)}
	}
	if _, ok := ac.mutation.Jitter(); !ok {
		return &ValidationError{Name: "jitter", err: errors.New(`ent: missing required field "Agent.jitter"`)}
	}
	if _, ok := ac.mutation.First(); !ok {
		return &ValidationError{Name: "first", err: errors.New(`ent: missing required field "Agent.first"`)}
	}
	if _, ok := ac.mutation.Last(); !ok {
		return &ValidationError{Name: "last", err: errors.New(`ent: missing required field "Agent.last"`)}
	}
	if _, ok := ac.mutation.Caps(); !ok {
		return &ValidationError{Name: "caps", err: errors.New(`ent: missing required field "Agent.caps"`)}
	}
	if v, ok := ac.mutation.Note(); ok {
		if err := agent.NoteValidator(v); err != nil {
			return &ValidationError{Name: "note", err: fmt.Errorf(`ent: validator failed for field "Agent.note": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Color(); !ok {
		return &ValidationError{Name: "color", err: errors.New(`ent: missing required field "Agent.color"`)}
	}
	if len(ac.mutation.ListenerIDs()) == 0 {
		return &ValidationError{Name: "listener", err: errors.New(`ent: missing required edge "Agent.listener"`)}
	}
	return nil
}

func (ac *AgentCreate) sqlSave(ctx context.Context) (*Agent, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AgentCreate) createSpec() (*Agent, *sqlgraph.CreateSpec) {
	var (
		_node = &Agent{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(agent.Table, sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint32))
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(agent.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(agent.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.DeletedAt(); ok {
		_spec.SetField(agent.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := ac.mutation.ExtIP(); ok {
		_spec.SetField(agent.FieldExtIP, field.TypeString, value)
		_node.ExtIP = value
	}
	if value, ok := ac.mutation.IntIP(); ok {
		_spec.SetField(agent.FieldIntIP, field.TypeString, value)
		_node.IntIP = value
	}
	if value, ok := ac.mutation.Os(); ok {
		_spec.SetField(agent.FieldOs, field.TypeEnum, value)
		_node.Os = value
	}
	if value, ok := ac.mutation.OsMeta(); ok {
		_spec.SetField(agent.FieldOsMeta, field.TypeString, value)
		_node.OsMeta = value
	}
	if value, ok := ac.mutation.Hostname(); ok {
		_spec.SetField(agent.FieldHostname, field.TypeString, value)
		_node.Hostname = value
	}
	if value, ok := ac.mutation.Username(); ok {
		_spec.SetField(agent.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := ac.mutation.Domain(); ok {
		_spec.SetField(agent.FieldDomain, field.TypeString, value)
		_node.Domain = value
	}
	if value, ok := ac.mutation.Privileged(); ok {
		_spec.SetField(agent.FieldPrivileged, field.TypeBool, value)
		_node.Privileged = value
	}
	if value, ok := ac.mutation.ProcessName(); ok {
		_spec.SetField(agent.FieldProcessName, field.TypeString, value)
		_node.ProcessName = value
	}
	if value, ok := ac.mutation.Pid(); ok {
		_spec.SetField(agent.FieldPid, field.TypeInt64, value)
		_node.Pid = value
	}
	if value, ok := ac.mutation.Arch(); ok {
		_spec.SetField(agent.FieldArch, field.TypeEnum, value)
		_node.Arch = value
	}
	if value, ok := ac.mutation.Sleep(); ok {
		_spec.SetField(agent.FieldSleep, field.TypeUint32, value)
		_node.Sleep = value
	}
	if value, ok := ac.mutation.Jitter(); ok {
		_spec.SetField(agent.FieldJitter, field.TypeUint8, value)
		_node.Jitter = value
	}
	if value, ok := ac.mutation.First(); ok {
		_spec.SetField(agent.FieldFirst, field.TypeTime, value)
		_node.First = value
	}
	if value, ok := ac.mutation.Last(); ok {
		_spec.SetField(agent.FieldLast, field.TypeTime, value)
		_node.Last = value
	}
	if value, ok := ac.mutation.Caps(); ok {
		_spec.SetField(agent.FieldCaps, field.TypeUint32, value)
		_node.Caps = value
	}
	if value, ok := ac.mutation.Note(); ok {
		_spec.SetField(agent.FieldNote, field.TypeString, value)
		_node.Note = value
	}
	if value, ok := ac.mutation.Color(); ok {
		_spec.SetField(agent.FieldColor, field.TypeUint32, value)
		_node.Color = value
	}
	if nodes := ac.mutation.ListenerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   agent.ListenerTable,
			Columns: []string{agent.ListenerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(listener.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ListenerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.CommandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.CommandTable,
			Columns: []string{agent.CommandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(command.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.TaskTable,
			Columns: []string{agent.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AgentCreateBulk is the builder for creating many Agent entities in bulk.
type AgentCreateBulk struct {
	config
	err      error
	builders []*AgentCreate
}

// Save creates the Agent entities in the database.
func (acb *AgentCreateBulk) Save(ctx context.Context) ([]*Agent, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Agent, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AgentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AgentCreateBulk) SaveX(ctx context.Context) []*Agent {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AgentCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AgentCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
