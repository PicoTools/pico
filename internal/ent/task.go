// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/PicoTools/pico-shared/shared"
	"github.com/PicoTools/pico/internal/ent/agent"
	"github.com/PicoTools/pico/internal/ent/blobber"
	"github.com/PicoTools/pico/internal/ent/command"
	"github.com/PicoTools/pico/internal/ent/task"
)

// Task is the model entity for the Task schema.
type Task struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// id of command
	CommandID int64 `json:"command_id,omitempty"`
	// id of agent
	AgentID uint32 `json:"agent_id,omitempty"`
	// time when task created
	CreatedAt time.Time `json:"created_at,omitempty"`
	// time when task pushed to the agent
	PushedAt time.Time `json:"pushed_at,omitempty"`
	// time when task results received
	DoneAt time.Time `json:"done_at,omitempty"`
	// status of task
	Status shared.TaskStatus `json:"status,omitempty"`
	// capability to execute
	Cap shared.Capability `json:"cap,omitempty"`
	// capability arguments
	ArgsID int `json:"args_id,omitempty"`
	// task output
	OutputID int `json:"output_id,omitempty"`
	// is output bigger than constant value
	OutputBig bool `json:"output_big,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TaskQuery when eager-loading is set.
	Edges        TaskEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TaskEdges holds the relations/edges for other nodes in the graph.
type TaskEdges struct {
	// Command holds the value of the command edge.
	Command *Command `json:"command,omitempty"`
	// Agent holds the value of the agent edge.
	Agent *Agent `json:"agent,omitempty"`
	// BlobberArgs holds the value of the blobber_args edge.
	BlobberArgs *Blobber `json:"blobber_args,omitempty"`
	// BlobberOutput holds the value of the blobber_output edge.
	BlobberOutput *Blobber `json:"blobber_output,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// CommandOrErr returns the Command value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskEdges) CommandOrErr() (*Command, error) {
	if e.Command != nil {
		return e.Command, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: command.Label}
	}
	return nil, &NotLoadedError{edge: "command"}
}

// AgentOrErr returns the Agent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskEdges) AgentOrErr() (*Agent, error) {
	if e.Agent != nil {
		return e.Agent, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: agent.Label}
	}
	return nil, &NotLoadedError{edge: "agent"}
}

// BlobberArgsOrErr returns the BlobberArgs value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskEdges) BlobberArgsOrErr() (*Blobber, error) {
	if e.BlobberArgs != nil {
		return e.BlobberArgs, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: blobber.Label}
	}
	return nil, &NotLoadedError{edge: "blobber_args"}
}

// BlobberOutputOrErr returns the BlobberOutput value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskEdges) BlobberOutputOrErr() (*Blobber, error) {
	if e.BlobberOutput != nil {
		return e.BlobberOutput, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: blobber.Label}
	}
	return nil, &NotLoadedError{edge: "blobber_output"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Task) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case task.FieldCap:
			values[i] = new(shared.Capability)
		case task.FieldStatus:
			values[i] = new(shared.TaskStatus)
		case task.FieldOutputBig:
			values[i] = new(sql.NullBool)
		case task.FieldID, task.FieldCommandID, task.FieldAgentID, task.FieldArgsID, task.FieldOutputID:
			values[i] = new(sql.NullInt64)
		case task.FieldCreatedAt, task.FieldPushedAt, task.FieldDoneAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Task fields.
func (t *Task) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case task.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int64(value.Int64)
		case task.FieldCommandID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field command_id", values[i])
			} else if value.Valid {
				t.CommandID = value.Int64
			}
		case task.FieldAgentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field agent_id", values[i])
			} else if value.Valid {
				t.AgentID = uint32(value.Int64)
			}
		case task.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case task.FieldPushedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field pushed_at", values[i])
			} else if value.Valid {
				t.PushedAt = value.Time
			}
		case task.FieldDoneAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field done_at", values[i])
			} else if value.Valid {
				t.DoneAt = value.Time
			}
		case task.FieldStatus:
			if value, ok := values[i].(*shared.TaskStatus); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value != nil {
				t.Status = *value
			}
		case task.FieldCap:
			if value, ok := values[i].(*shared.Capability); !ok {
				return fmt.Errorf("unexpected type %T for field cap", values[i])
			} else if value != nil {
				t.Cap = *value
			}
		case task.FieldArgsID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field args_id", values[i])
			} else if value.Valid {
				t.ArgsID = int(value.Int64)
			}
		case task.FieldOutputID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field output_id", values[i])
			} else if value.Valid {
				t.OutputID = int(value.Int64)
			}
		case task.FieldOutputBig:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field output_big", values[i])
			} else if value.Valid {
				t.OutputBig = value.Bool
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Task.
// This includes values selected through modifiers, order, etc.
func (t *Task) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryCommand queries the "command" edge of the Task entity.
func (t *Task) QueryCommand() *CommandQuery {
	return NewTaskClient(t.config).QueryCommand(t)
}

// QueryAgent queries the "agent" edge of the Task entity.
func (t *Task) QueryAgent() *AgentQuery {
	return NewTaskClient(t.config).QueryAgent(t)
}

// QueryBlobberArgs queries the "blobber_args" edge of the Task entity.
func (t *Task) QueryBlobberArgs() *BlobberQuery {
	return NewTaskClient(t.config).QueryBlobberArgs(t)
}

// QueryBlobberOutput queries the "blobber_output" edge of the Task entity.
func (t *Task) QueryBlobberOutput() *BlobberQuery {
	return NewTaskClient(t.config).QueryBlobberOutput(t)
}

// Update returns a builder for updating this Task.
// Note that you need to call Task.Unwrap() before calling this method if this Task
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Task) Update() *TaskUpdateOne {
	return NewTaskClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Task entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Task) Unwrap() *Task {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Task is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Task) String() string {
	var builder strings.Builder
	builder.WriteString("Task(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("command_id=")
	builder.WriteString(fmt.Sprintf("%v", t.CommandID))
	builder.WriteString(", ")
	builder.WriteString("agent_id=")
	builder.WriteString(fmt.Sprintf("%v", t.AgentID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("pushed_at=")
	builder.WriteString(t.PushedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("done_at=")
	builder.WriteString(t.DoneAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", t.Status))
	builder.WriteString(", ")
	builder.WriteString("cap=")
	builder.WriteString(fmt.Sprintf("%v", t.Cap))
	builder.WriteString(", ")
	builder.WriteString("args_id=")
	builder.WriteString(fmt.Sprintf("%v", t.ArgsID))
	builder.WriteString(", ")
	builder.WriteString("output_id=")
	builder.WriteString(fmt.Sprintf("%v", t.OutputID))
	builder.WriteString(", ")
	builder.WriteString("output_big=")
	builder.WriteString(fmt.Sprintf("%v", t.OutputBig))
	builder.WriteByte(')')
	return builder.String()
}

// Tasks is a parsable slice of Task.
type Tasks []*Task
