// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/PicoTools/pico/internal/ent/agent"
	"github.com/PicoTools/pico/internal/ent/command"
	"github.com/PicoTools/pico/internal/ent/operator"
)

// Command is the model entity for the Command schema.
type Command struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// agent ID
	AgentID uint32 `json:"agent_id,omitempty"`
	// command with arguments
	Cmd string `json:"cmd,omitempty"`
	// is group visible for other operators
	Visible bool `json:"visible,omitempty"`
	// author of group
	AuthorID int64 `json:"author_id,omitempty"`
	// when group created
	CreatedAt time.Time `json:"created_at,omitempty"`
	// when group closed
	ClosedAt time.Time `json:"closed_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CommandQuery when eager-loading is set.
	Edges        CommandEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CommandEdges holds the relations/edges for other nodes in the graph.
type CommandEdges struct {
	// Agent holds the value of the agent edge.
	Agent *Agent `json:"agent,omitempty"`
	// Operator holds the value of the operator edge.
	Operator *Operator `json:"operator,omitempty"`
	// Message holds the value of the message edge.
	Message []*Message `json:"message,omitempty"`
	// Task holds the value of the task edge.
	Task []*Task `json:"task,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// AgentOrErr returns the Agent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CommandEdges) AgentOrErr() (*Agent, error) {
	if e.Agent != nil {
		return e.Agent, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: agent.Label}
	}
	return nil, &NotLoadedError{edge: "agent"}
}

// OperatorOrErr returns the Operator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CommandEdges) OperatorOrErr() (*Operator, error) {
	if e.Operator != nil {
		return e.Operator, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: operator.Label}
	}
	return nil, &NotLoadedError{edge: "operator"}
}

// MessageOrErr returns the Message value or an error if the edge
// was not loaded in eager-loading.
func (e CommandEdges) MessageOrErr() ([]*Message, error) {
	if e.loadedTypes[2] {
		return e.Message, nil
	}
	return nil, &NotLoadedError{edge: "message"}
}

// TaskOrErr returns the Task value or an error if the edge
// was not loaded in eager-loading.
func (e CommandEdges) TaskOrErr() ([]*Task, error) {
	if e.loadedTypes[3] {
		return e.Task, nil
	}
	return nil, &NotLoadedError{edge: "task"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Command) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case command.FieldVisible:
			values[i] = new(sql.NullBool)
		case command.FieldID, command.FieldAgentID, command.FieldAuthorID:
			values[i] = new(sql.NullInt64)
		case command.FieldCmd:
			values[i] = new(sql.NullString)
		case command.FieldCreatedAt, command.FieldClosedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Command fields.
func (c *Command) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case command.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int64(value.Int64)
		case command.FieldAgentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field agent_id", values[i])
			} else if value.Valid {
				c.AgentID = uint32(value.Int64)
			}
		case command.FieldCmd:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cmd", values[i])
			} else if value.Valid {
				c.Cmd = value.String
			}
		case command.FieldVisible:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field visible", values[i])
			} else if value.Valid {
				c.Visible = value.Bool
			}
		case command.FieldAuthorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field author_id", values[i])
			} else if value.Valid {
				c.AuthorID = value.Int64
			}
		case command.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case command.FieldClosedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field closed_at", values[i])
			} else if value.Valid {
				c.ClosedAt = value.Time
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Command.
// This includes values selected through modifiers, order, etc.
func (c *Command) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryAgent queries the "agent" edge of the Command entity.
func (c *Command) QueryAgent() *AgentQuery {
	return NewCommandClient(c.config).QueryAgent(c)
}

// QueryOperator queries the "operator" edge of the Command entity.
func (c *Command) QueryOperator() *OperatorQuery {
	return NewCommandClient(c.config).QueryOperator(c)
}

// QueryMessage queries the "message" edge of the Command entity.
func (c *Command) QueryMessage() *MessageQuery {
	return NewCommandClient(c.config).QueryMessage(c)
}

// QueryTask queries the "task" edge of the Command entity.
func (c *Command) QueryTask() *TaskQuery {
	return NewCommandClient(c.config).QueryTask(c)
}

// Update returns a builder for updating this Command.
// Note that you need to call Command.Unwrap() before calling this method if this Command
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Command) Update() *CommandUpdateOne {
	return NewCommandClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Command entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Command) Unwrap() *Command {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Command is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Command) String() string {
	var builder strings.Builder
	builder.WriteString("Command(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("agent_id=")
	builder.WriteString(fmt.Sprintf("%v", c.AgentID))
	builder.WriteString(", ")
	builder.WriteString("cmd=")
	builder.WriteString(c.Cmd)
	builder.WriteString(", ")
	builder.WriteString("visible=")
	builder.WriteString(fmt.Sprintf("%v", c.Visible))
	builder.WriteString(", ")
	builder.WriteString("author_id=")
	builder.WriteString(fmt.Sprintf("%v", c.AuthorID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("closed_at=")
	builder.WriteString(c.ClosedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Commands is a parsable slice of Command.
type Commands []*Command
